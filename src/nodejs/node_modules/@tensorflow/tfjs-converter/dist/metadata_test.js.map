{"version":3,"file":"metadata_test.js","sourceRoot":"","sources":["../src/metadata_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;AAEH,6EAA6E;AAC7E,kEAAkE;AAClE,iBAAiB;AACjB,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,CAAC,GAAG,EAAE;YACV,8CAA8C;YAC9C,OAAO,CAAC,4BAA4B,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,oBAAoB,GAAG;YAC3B,OAAO;YACP,iBAAiB;YACjB,OAAO;YACP,MAAM;YACN,yBAAyB;YACzB,UAAU;YACV,WAAW;YACX,IAAI;YACJ,UAAU;YACV,OAAO;YACP,eAAe;YACf,aAAa;YACb,wBAAwB;YACxB,OAAO;YACP,UAAU;YACV,aAAa;YACb,gBAAgB;YAChB,cAAc;YACd,QAAQ;YACR,oBAAoB;YACpB,qBAAqB;YACrB,qBAAqB;YACrB,mBAAmB;YACnB,sBAAsB;YACtB,mBAAmB;YACnB,oBAAoB;YACpB,eAAe;YACf,oBAAoB;YACpB,kBAAkB;YAClB,sBAAsB;YACtB,kBAAkB;YAClB,mBAAmB;YACnB,mBAAmB;YACnB,oBAAoB;YACpB,mBAAmB;YACnB,mBAAmB;YACnB,qBAAqB;YACrB,mBAAmB;YACnB,iBAAiB;YACjB,iBAAiB;YACjB,OAAO;YACP,WAAW;YACX,aAAa;YACb,mBAAmB;YACnB,qBAAqB;YACrB,iBAAiB;YACjB,mBAAmB;YACnB,iBAAiB;YACjB,mBAAmB;SACpB,CAAC;QACF,8CAA8C;QAC9C,MAAM,SAAS,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;QACxD,MAAM,OAAO,GAAa,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEjD,KAAK,MAAM,UAAU,IAAI,OAAO,EAAE;YAChC,MAAM,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;YACpC,IAAI,oBAAoB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC7C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;qBACf,OAAO,CAAC,CAAC,EAAE,WAAW,UAAU;gCACb,KAAK,EAAE,CAAC,CAAC;aAClC;iBAAM;gBACL,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;qBACf,eAAe,CACZ,CAAC,EAAE,UAAU,UAAU;0BACb,CAAC,CAAC;aACrB;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// This test checks the metadata.json to make sure that only the kernels that\n// we know we don't map to tfjs ops have empty entries in metadata\n// kernel2op.json\ndescribe('kernel2op metadata file', () => {\n  it('has kernel2op.json', () => {\n    expect(() => {\n      // tslint:disable-next-line:no-require-imports\n      require('../metadata/kernel2op.json');\n    }).not.toThrow();\n  });\n\n  it('only known unmapped kernel are unmmapped', () => {\n    const knownUnmappedKernels = [\n      'Const',\n      'EmptyTensorList',\n      'Enter',\n      'Exit',\n      'FakeQuantWithMinMaxVars',\n      'Identity',\n      'IdentityN',\n      'If',\n      'LoopCond',\n      'Merge',\n      'NextIteration',\n      'Placeholder',\n      'PlaceholderWithDefault',\n      'Print',\n      'Snapshot',\n      'StatelessIf',\n      'StatelessWhile',\n      'StopGradient',\n      'Switch',\n      'TensorArrayCloseV3',\n      'TensorArrayConcatV3',\n      'TensorArrayGatherV3',\n      'TensorArrayReadV3',\n      'TensorArrayScatterV3',\n      'TensorArraySizeV3',\n      'TensorArraySplitV3',\n      'TensorArrayV3',\n      'TensorArrayWriteV3',\n      'TensorListConcat',\n      'TensorListFromTensor',\n      'TensorListGather',\n      'TensorListGetItem',\n      'TensorListPopBack',\n      'TensorListPushBack',\n      'TensorListReserve',\n      'TensorListScatter',\n      'TensorListScatterV2',\n      'TensorListSetItem',\n      'TensorListSplit',\n      'TensorListStack',\n      'While',\n      'HashTable',\n      'HashTableV2',\n      'LookupTableImport',\n      'LookupTableImportV2',\n      'LookupTableFind',\n      'LookupTableFindV2',\n      'LookupTableSize',\n      'LookupTableSizeV2'\n    ];\n    // tslint:disable-next-line:no-require-imports\n    const kernel2op = require('../metadata/kernel2op.json');\n    const kernels: string[] = Object.keys(kernel2op);\n\n    for (const kernelName of kernels) {\n      const tfOps = kernel2op[kernelName];\n      if (knownUnmappedKernels.includes(kernelName)) {\n        expect(tfOps.length)\n            .toEqual(0, `Kernel \"${kernelName}\" is expected to be unmapped but\n              instead maps to ${tfOps}`);\n      } else {\n        expect(tfOps.length)\n            .toBeGreaterThan(\n                0, `Kernel ${kernelName} is expected to be mapped to a list\n                of tf ops`);\n      }\n    }\n  });\n});\n"]}