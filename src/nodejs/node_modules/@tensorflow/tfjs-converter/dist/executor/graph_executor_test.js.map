{"version":3,"file":"graph_executor_test.js","sourceRoot":"","sources":["../../src/executor/graph_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {createTensorAttr} from '../operations/executors/test_helper';\nimport {Graph, Node} from '../operations/types';\n\nimport {GraphExecutor} from './graph_executor';\n\nlet executor: GraphExecutor;\nlet inputNode: Node;\nlet constNode: Node;\nlet intermediateNode: Node;\nlet rsqrtNode: Node;\nlet outputNode: Node;\nlet graph: Graph;\nlet graphWithControlFlow: Graph;\nlet constTensor: tfc.Tensor;\n\nconst SIGNATURE: tensorflow.ISignatureDef = {\n  inputs: {\n    x: {name: 'input', dtype: tensorflow.DataType.DT_INT32, tensorShape: {}}\n  },\n  outputs: {\n    add: {\n      name: 'output',\n      dtype: tensorflow.DataType.DT_FLOAT,\n      tensorShape: {}\n    }\n  }\n};\n\ndescribe('GraphExecutor', () => {\n  beforeEach(() => {\n    inputNode = {\n      inputNames: [],\n      inputs: [],\n      children: [],\n      signatureKey: 'x',\n      name: 'input',\n      op: 'Placeholder',\n      category: 'graph',\n      attrParams: {},\n      inputParams: {}\n    };\n    constNode = {\n      inputNames: [],\n      inputs: [],\n      children: [],\n      name: 'const',\n      op: 'Const',\n      category: 'graph',\n      attrParams: {},\n      inputParams: {}\n\n    };\n    intermediateNode = {\n      inputNames: ['input', 'const'],\n      inputs: [inputNode, constNode],\n      children: [],\n      name: 'intermediate',\n      op: 'Add',\n      category: 'arithmetic',\n      inputParams: {'a': createTensorAttr(0), 'b': createTensorAttr(1)},\n      attrParams: {}\n    };\n    outputNode = {\n      inputNames: ['intermediate', 'const'],\n      inputs: [intermediateNode, constNode],\n      children: [],\n      name: 'output',\n      signatureKey: 'add',\n      op: 'Add',\n      category: 'arithmetic',\n      inputParams: {'a': createTensorAttr(0), 'b': createTensorAttr(1)},\n      attrParams: {}\n    };\n    graph = {\n      inputs: [inputNode],\n      nodes: {\n        'input': inputNode,\n        'const': constNode,\n        'intermediate': intermediateNode,\n        'output': outputNode\n      },\n      outputs: [outputNode],\n      weights: [constNode],\n      placeholders: [inputNode],\n      functions: {\n        while_body: {\n          inputs: [inputNode],\n          nodes: {\n            'input': inputNode,\n            'const': constNode,\n            'intermediate': intermediateNode,\n            'output': outputNode\n          },\n          outputs: [outputNode],\n          weights: [constNode],\n          placeholders: [inputNode],\n          signature: SIGNATURE\n        }\n      },\n      signature: SIGNATURE\n    };\n    inputNode.children.push(intermediateNode);\n    constNode.children.push(intermediateNode, outputNode);\n    intermediateNode.children.push(outputNode);\n    executor = new GraphExecutor(graph);\n    constTensor = tfc.scalar(2.0);\n    executor.weightMap = {'const': [constTensor]};\n  });\n  afterEach(() => {});\n\n  describe('execute graph', () => {\n    describe('initialization', () => {\n      it('should expose input names', () => {\n        expect(executor.inputNodes).toEqual(['x']);\n      });\n\n      it('should expose output names', () => {\n        expect(executor.outputNodes).toEqual(['add']);\n      });\n\n      it('should expose inputs', () => {\n        inputNode.attrParams['shape'] = {value: [1], type: 'shape'};\n        inputNode.attrParams['dtype'] = {value: 'float32', type: 'dtype'};\n        expect(executor.inputs).toEqual([\n          {name: 'input', shape: [1], dtype: 'float32'}\n        ]);\n      });\n\n      it('should expose outputs', () => {\n        outputNode.attrParams['shape'] = {value: [1, 1], type: 'shape'};\n        outputNode.attrParams['dtype'] = {value: 'int32', type: 'dtype'};\n        expect(executor.outputs).toEqual([\n          {name: 'output', shape: [1, 1], dtype: 'int32'}\n        ]);\n      });\n\n      it('should expose functions', () => {\n        expect(executor.functions).toEqual({while_body: SIGNATURE});\n      });\n    });\n\n    describe('graph level', () => {\n      describe('execute', () => {\n        it('should execute the op', async () => {\n          const inputTensor = tfc.scalar(1);\n          const result = executor.execute({input: inputTensor}, ['output']);\n          tfc.test_util.expectArraysClose(await result[0].data(), [5.0]);\n        });\n\n        it('should allow output intermediate nodes', async () => {\n          const inputTensor = tfc.scalar(1);\n          const result = executor.execute(\n              {input: inputTensor}, ['output', 'intermediate']);\n          tfc.test_util.expectArraysClose(await result[1].data(), [3.0]);\n          tfc.test_util.expectArraysClose(await result[0].data(), [5.0]);\n        });\n\n        it('should allow feed intermediate nodes', async () => {\n          const intermediateTensor = tfc.scalar(1);\n          const result =\n              executor.execute({intermediate: intermediateTensor}, ['output']);\n          tfc.test_util.expectArraysClose(await result[0].data(), [3.0]);\n        });\n\n        describe('strict input check', () => {\n          it('should throw exception if missing inputs', () => {\n            expect(() => executor.execute({}, ['output']))\n                .toThrowError(\n                    'Cannot compute the outputs [output] from the provided ' +\n                    'inputs []. Missing the following inputs: [input]');\n          });\n\n          it('should throw exception if contains extra inputs', () => {\n            const inputTensor = tfc.scalar(1);\n            expect(\n                () => executor.execute(\n                    {test: inputTensor, input: inputTensor}, ['output']))\n                .toThrowError(\n                    'The dict provided in model.execute(dict) has keys: ' +\n                    '[test] that are not part of graph');\n          });\n\n          it('should throw exception if inputs shapes mismatch', () => {\n            inputNode.attrParams['shape'] = {value: [1, 1], type: 'shape'};\n            const inputTensor = tfc.tensor1d([1], 'float32');\n            expect(() => executor.execute({input: inputTensor}, ['output']))\n                .toThrow(new Error(\n                    'The shape of dict[\\'input\\'] provided' +\n                    ' in model.execute(dict) must be [1,1], but was [1]'));\n          });\n\n          it('should throw exception for dtype mismatch', () => {\n            inputNode.attrParams['dtype'] = {value: 'int32', type: 'dtype'};\n            const inputTensor = tfc.tensor1d([1], 'float32');\n            expect(() => executor.execute({input: inputTensor}, ['output']))\n                .toThrow(new Error(\n                    'The dtype of dict[\\'input\\'] provided' +\n                    ' in model.execute(dict) must be int32, but was float32'));\n          });\n        });\n\n        describe('outputs check', () => {\n          it('should reject missing outputs', () => {\n            const inputTensor = tfc.tensor1d([1], 'float32');\n            expect(() => executor.execute({input: inputTensor}, ['missing']))\n                .toThrowError(/The output 'missing' is not found in the graph/);\n          });\n\n          it('should reject missing outputs with child tensors', () => {\n            const inputTensor = tfc.tensor1d([1], 'float32');\n            expect(() => executor.execute({input: inputTensor}, ['missing:0']))\n                .toThrowError(\n                    /The output 'missing:0' is not found in the graph/);\n          });\n\n          it('should accept existing outputs', () => {\n            const inputTensor = tfc.tensor1d([1], 'float32');\n            const res = executor.execute({input: inputTensor}, ['output']);\n            expect(res).not.toBeNull();\n          });\n\n          it('should accept existing outputs with child tensors', () => {\n            const inputTensor = tfc.tensor1d([1], 'float32');\n            const res = executor.execute({input: inputTensor}, ['output:0']);\n            expect(res).not.toBeNull();\n          });\n        });\n\n        it('should not throw exception if inputs shapes is dynamic', () => {\n          inputNode.attrParams['shape'] = {value: [-1, 1, 1, 1], type: 'shape'};\n          const inputTensor = tfc.tensor4d([1, 1], [2, 1, 1, 1], 'float32');\n          const res = executor.execute({input: inputTensor}, ['output']);\n          expect(res).not.toBeNull();\n        });\n\n        it('should not have mem leak when add index', async () => {\n          const inputTensor = tfc.tensor4d([1, 1], [2, 1, 1, 1], 'float32');\n          const numTensors: number = tfc.memory().numTensors;\n\n          const res = executor.execute({input: inputTensor}, ['output:0']);\n          expect(res).not.toBeNull();\n          expect(tfc.memory().numTensors).toEqual(numTensors + 1);\n        });\n      });\n\n      describe('executeAsync', () => {\n        beforeEach(() => {\n          inputNode = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'input',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          constNode = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'const',\n            op: 'Const',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          intermediateNode = {\n            inputNames: ['input', 'const'],\n            inputs: [inputNode, constNode],\n            children: [],\n            name: 'intermediate',\n            op: 'Add',\n            category: 'arithmetic',\n            inputParams: {'a': createTensorAttr(0), 'b': createTensorAttr(1)},\n            attrParams: {}\n          };\n          rsqrtNode = {\n            inputNames: ['intermediate'],\n            inputs: [intermediateNode],\n            children: [],\n            name: 'rsqrt',\n            op: 'Rsqrt',\n            category: 'basic_math',\n            inputParams: {'x': createTensorAttr(0)},\n            attrParams: {}\n          };\n          outputNode = {\n            inputNames: ['const', 'rsqrt'],\n            inputs: [constNode, rsqrtNode],\n            children: [],\n            name: 'output',\n            op: 'Switch',\n            category: 'control',\n            inputParams:\n                {'pred': createTensorAttr(0), 'data': createTensorAttr(1)},\n            attrParams: {}\n          };\n          inputNode.children.push(intermediateNode);\n          constNode.children.push(intermediateNode, outputNode);\n          intermediateNode.children.push(rsqrtNode);\n          rsqrtNode.children.push(outputNode);\n          graphWithControlFlow = {\n            inputs: [constNode, inputNode],\n            nodes: {\n              'input': inputNode,\n              'const': constNode,\n              'intermediate': intermediateNode,\n              'rsqrt': rsqrtNode,\n              'output': outputNode\n            },\n            outputs: [outputNode],\n            weights: [constNode],\n            placeholders: [inputNode]\n          };\n\n          executor = new GraphExecutor(graphWithControlFlow);\n          executor.weightMap = {const : [constTensor]};\n        });\n\n        it('should execute control flow graph', async () => {\n          const inputTensor = tfc.scalar(1);\n\n          const result =\n              await executor.executeAsync({input: inputTensor}, ['output:1']);\n          tfc.test_util.expectArraysClose(await result[0].data(), [0.57735]);\n        });\n\n        it('should allow output intermediate nodes', async () => {\n          const inputTensor = tfc.scalar(1);\n          const result = await executor.executeAsync(\n              {input: inputTensor}, ['intermediate']);\n          tfc.test_util.expectArraysClose(await result[0].data(), [3.0]);\n        });\n\n        it('should be able to execute control flow graph ' +\n               'with intermediate node more than once',\n           async () => {\n             const inputTensor = tfc.scalar(1);\n\n             const result = await executor.executeAsync(\n                 {intermediate: inputTensor}, ['output:1']);\n             tfc.test_util.expectArraysClose(await result[0].data(), [1]);\n             const result2 = await executor.executeAsync(\n                 {intermediate: inputTensor}, ['output:1']);\n             tfc.test_util.expectArraysClose(await result2[0].data(), [1]);\n           });\n\n        it('should not have mem leak', async () => {\n          const inputTensor = tfc.scalar(1);\n          const numTensors: number = tfc.memory().numTensors;\n\n          await executor.executeAsync({input: inputTensor}, ['output:1']);\n          expect(tfc.memory().numTensors).toEqual(numTensors + 1);\n        });\n      });\n\n      describe('controlFlowV2_if', () => {\n        beforeEach(() => {\n          inputNode = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'input',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const inputNode2: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'x',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const inputNode3: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'y',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          outputNode = {\n            inputNames: ['input', 'x', 'y'],\n            inputs: [inputNode, inputNode2, inputNode3],\n            children: [],\n            name: 'output',\n            op: 'StatelessIf',\n            category: 'control',\n            attrParams: {\n              'thenBranch': {'value': 'trueFunc', 'type': 'func'},\n              'elseBranch': {'value': 'falseFunc', 'type': 'func'}\n            },\n            inputParams: {\n              'cond': {'type': 'tensor', 'inputIndexStart': 0},\n              'args': {\n                'type': 'tensors',\n                'inputIndexStart': 1,\n                'inputIndexEnd': 0\n              }\n            }\n          };\n          inputNode.children.push(outputNode);\n          inputNode2.children.push(outputNode);\n          inputNode3.children.push(outputNode);\n          const xNode: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'x',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const yNode: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'y',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const trueFuncGraph: Graph = {\n            inputs: [xNode, yNode],\n            nodes: {'x': xNode, 'y': yNode},\n            outputs: [xNode],\n            weights: [],\n            placeholders: [xNode, yNode],\n          };\n          const falseFuncGraph: Graph = {\n            inputs: [xNode, yNode],\n            nodes: {'x': xNode, 'y': yNode},\n            outputs: [yNode],\n            weights: [],\n            placeholders: [xNode, yNode],\n          };\n          graphWithControlFlow = {\n            inputs: [inputNode, inputNode2, inputNode3],\n            nodes: {\n              'input': inputNode,\n              'x': inputNode2,\n              'y': inputNode3,\n              'output': outputNode\n            },\n            outputs: [outputNode],\n            weights: [],\n            placeholders: [inputNode, inputNode2, inputNode3],\n            functions: {trueFunc: trueFuncGraph, falseFunc: falseFuncGraph}\n          };\n\n          executor = new GraphExecutor(graphWithControlFlow);\n          executor.weightMap = {};\n        });\n\n        it('should execute control flow v2 graph', async () => {\n          const condTensor = tfc.scalar(true, 'bool');\n          const condTensor2 = tfc.scalar(false, 'bool');\n          const trueTensor = tfc.scalar(1, 'int32');\n          const falseTensor = tfc.scalar(0, 'int32');\n\n          let result = await executor.executeAsync(\n              {input: condTensor, x: trueTensor, y: falseTensor}, ['output']);\n          tfc.test_util.expectArraysClose(await result[0].data(), 1);\n          result = await executor.executeAsync(\n              {input: condTensor2, x: trueTensor, y: falseTensor}, ['output']);\n          tfc.test_util.expectArraysClose(await result[0].data(), 0);\n        });\n        it('should not have mem leak', async () => {\n          const condTensor = tfc.scalar(true, 'bool');\n          const trueTensor = tfc.scalar(1, 'int32');\n          const falseTensor = tfc.scalar(0, 'int32');\n          const numTensors: number = tfc.memory().numTensors;\n\n          await executor.executeAsync(\n              {input: condTensor, x: trueTensor, y: falseTensor}, ['output']);\n          expect(tfc.memory().numTensors).toEqual(numTensors);\n        });\n      });\n\n      describe('controlFlowV2_while', () => {\n        beforeEach(() => {\n          const inputNode2: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'x',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const inputNode3: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'y',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          outputNode = {\n            inputNames: ['x', 'y'],\n            inputs: [inputNode2, inputNode3],\n            children: [],\n            name: 'output',\n            op: 'StatelessWhile',\n            category: 'control',\n            attrParams: {\n              'cond': {'value': 'condFunc', 'type': 'func'},\n              'body': {'value': 'bodyFunc', 'type': 'func'}\n            },\n            inputParams: {\n              'args': {\n                'type': 'tensors',\n                'inputIndexStart': 0,\n                'inputIndexEnd': 0\n              }\n            }\n          };\n          inputNode2.children.push(outputNode);\n          inputNode3.children.push(outputNode);\n          const xNode: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'x',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const yNode: Node = {\n            inputNames: [],\n            inputs: [],\n            children: [],\n            name: 'y',\n            op: 'Placeholder',\n            category: 'graph',\n            attrParams: {},\n            inputParams: {}\n          };\n          const addNode: Node = {\n            inputNames: ['x', 'y'],\n            inputs: [xNode, yNode],\n            children: [],\n            name: 'add',\n            op: 'Add',\n            category: 'arithmetic',\n            inputParams: {'a': createTensorAttr(0), 'b': createTensorAttr(1)},\n            attrParams: {}\n          };\n          xNode.children.push(addNode);\n          yNode.children.push(addNode);\n          const bodyFunc: Graph = {\n            inputs: [xNode, yNode],\n            nodes: {'x': xNode, 'y': yNode, add: addNode},\n            outputs: [addNode, yNode],\n            weights: [],\n            placeholders: [xNode, yNode],\n          };\n          const condFunc: Graph = {\n            inputs: [xNode, yNode],\n            nodes: {'x': xNode, 'y': yNode},\n            outputs: [xNode],\n            weights: [],\n            placeholders: [xNode, yNode],\n          };\n          graphWithControlFlow = {\n            inputs: [inputNode2, inputNode3],\n            nodes: {'x': inputNode2, 'y': inputNode3, 'output': outputNode},\n            outputs: [outputNode],\n            weights: [],\n            placeholders: [inputNode2, inputNode3],\n            functions: {condFunc, bodyFunc}\n          };\n\n          executor = new GraphExecutor(graphWithControlFlow);\n          executor.weightMap = {};\n        });\n\n        it('should execute control flow v2 graph', async () => {\n          const trueTensor = tfc.scalar(-1, 'int32');\n          const falseTensor = tfc.scalar(1, 'int32');\n\n          const result = await executor.executeAsync(\n              {x: trueTensor, y: falseTensor}, ['output']);\n          tfc.test_util.expectArraysClose(await result[0].data(), 0);\n        });\n        it('should not have mem leak', async () => {\n          const trueTensor = tfc.scalar(-1, 'int32');\n          const falseTensor = tfc.scalar(1, 'int32');\n          const numTensors: number = tfc.memory().numTensors;\n\n          await executor.executeAsync(\n              {x: trueTensor, y: falseTensor}, ['output']);\n          expect(tfc.memory().numTensors).toEqual(numTensors + 1);\n        });\n        it('should not have mem leak when add index', async () => {\n          const trueTensor = tfc.scalar(-1, 'int32');\n          const falseTensor = tfc.scalar(1, 'int32');\n          const numTensors: number = tfc.memory().numTensors;\n\n          await executor.executeAsync(\n              {x: trueTensor, y: falseTensor}, ['output:0']);\n          expect(tfc.memory().numTensors).toEqual(numTensors + 1);\n        });\n      });\n    });\n  });\n});\n"]}