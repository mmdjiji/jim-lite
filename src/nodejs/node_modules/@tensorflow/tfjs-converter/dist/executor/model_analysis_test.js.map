{"version":3,"file":"model_analysis_test.js","sourceRoot":"","sources":["../../src/executor/model_analysis_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAiB,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAG7D,OAAO,EAAC,eAAe,EAAC,MAAM,gCAAgC,CAAC;AAE/D,OAAO,EAAC,oBAAoB,EAAC,MAAM,kBAAkB,CAAC;AAEtD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,QAAQ,GAAc;YAC1B,IAAI,EAAE;gBACJ,EAAC,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAC;gBAClC,EAAC,IAAI,EAAE,cAAc,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC;gBAC5D,EAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,cAAc,CAAC,EAAC;gBACvD,EAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,OAAO,EAAC;gBAC7B,EAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAC,CAAE,qBAAqB;aACxE;YACD,QAAQ,EAAE,EAAC,QAAQ,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,EAAC;SAC1C,CAAC;QACF,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAEhE,mBAAmB;QACnB,IAAI,MAAM,GAAmB,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QAClD,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtC,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACrE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC1D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7C,yBAAyB;QACzB,MAAM,GAAG,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QAC9B,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;QACxC,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC1D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7C,qBAAqB;QACrB,MAAM,GAAG,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QAC/B,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;QACnC,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7C,qCAAqC;QACrC,MAAM,GAAG,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QAC9B,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;QACnC,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7C,qCAAqC;QACrC,MAAM,GAAG,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QAC/B,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClC,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7C,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC1D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,QAAQ,GAAc;YAC1B,IAAI,EAAE;gBACJ,EAAC,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAC;gBAClC,EAAC,IAAI,EAAE,cAAc,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC,EAAC;gBACrD,EAAC,IAAI,EAAE,eAAe,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,cAAc,CAAC,EAAC;gBAC7D,EAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,eAAe,CAAC,EAAC;aACzD;YACD,QAAQ,EAAE,EAAC,QAAQ,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,EAAC;SAC1C,CAAC;QACF,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAEhE,mBAAmB;QACnB,MAAM,MAAM,GAAmB,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;QACpD,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxC,MAAM,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACvE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC1D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC3D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap, scalar} from '@tensorflow/tfjs-core';\n\nimport {IGraphDef} from '../data/compiled_api';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {getExecutionSubgraph} from './model_analysis';\n\ndescribe('getExecutionInfo', () => {\n  it('2 disconnected subgraphs, no dynamic ops', () => {\n    const weightMap = {};\n    const graphDef: IGraphDef = {\n      node: [\n        {name: 'input', op: 'Placeholder'},\n        {name: 'intermediate', op: 'Add', input: ['input', 'input']},\n        {name: 'output', op: 'Square', input: ['intermediate']},\n        {name: 'input2', op: 'Const'},                    // Unrelated to input.\n        {name: 'output2', op: 'Sqrt', input: ['input2']}  // Related to input2.\n      ],\n      versions: {producer: 1.0, minConsumer: 3}\n    };\n    const graph = OperationMapper.Instance.transformGraph(graphDef);\n\n    // input --> output\n    let inputs: NamedTensorMap = {'input': scalar(0)};\n    let outputs = [graph.nodes['output']];\n    let executionInfo = getExecutionSubgraph(inputs, outputs, weightMap);\n    expect(executionInfo.inputs).toBe(inputs);\n    expect(executionInfo.outputs).toBe(outputs);\n    expect(executionInfo.dynamicNode).toBeFalsy();\n    expect(executionInfo.missingInputs).toEqual([]);\n    expect(executionInfo.syncInputs).toBeFalsy();\n    expect(executionInfo.usedNodes).toContain('input');\n    expect(executionInfo.usedNodes).toContain('intermediate');\n    expect(executionInfo.usedNodes).toContain('output');\n    expect(executionInfo.usedNodes.size).toBe(3);\n\n    // input --> intermediate\n    inputs = {'input': scalar(0)};\n    outputs = [graph.nodes['intermediate']];\n    executionInfo = getExecutionSubgraph(inputs, outputs, weightMap);\n    expect(executionInfo.inputs).toBe(inputs);\n    expect(executionInfo.outputs).toBe(outputs);\n    expect(executionInfo.dynamicNode).toBeFalsy();\n    expect(executionInfo.missingInputs).toEqual([]);\n    expect(executionInfo.syncInputs).toBeFalsy();\n    expect(executionInfo.usedNodes).toContain('input');\n    expect(executionInfo.usedNodes).toContain('intermediate');\n    expect(executionInfo.usedNodes.size).toBe(2);\n\n    // input2 --> output2\n    inputs = {'input2': scalar(0)};\n    outputs = [graph.nodes['output2']];\n    executionInfo = getExecutionSubgraph(inputs, outputs, weightMap);\n    expect(executionInfo.inputs).toBe(inputs);\n    expect(executionInfo.outputs).toBe(outputs);\n    expect(executionInfo.dynamicNode).toBeFalsy();\n    expect(executionInfo.missingInputs).toEqual([]);\n    expect(executionInfo.syncInputs).toBeFalsy();\n    expect(executionInfo.usedNodes).toContain('input2');\n    expect(executionInfo.usedNodes).toContain('output2');\n    expect(executionInfo.usedNodes.size).toBe(2);\n\n    // input --> output2 is disconnected.\n    inputs = {'input': scalar(0)};\n    outputs = [graph.nodes['output2']];\n    executionInfo = getExecutionSubgraph(inputs, outputs, weightMap);\n    expect(executionInfo.inputs).toBe(inputs);\n    expect(executionInfo.outputs).toBe(outputs);\n    expect(executionInfo.dynamicNode).toBeFalsy();\n    expect(executionInfo.missingInputs).toEqual(['input2']);\n    expect(executionInfo.syncInputs).toBeFalsy();\n    expect(executionInfo.usedNodes).toContain('output2');\n    expect(executionInfo.usedNodes).toContain('input2');\n    expect(executionInfo.usedNodes.size).toBe(2);\n\n    // input2 --> output is disconnected.\n    inputs = {'input2': scalar(0)};\n    outputs = [graph.nodes['output']];\n    executionInfo = getExecutionSubgraph(inputs, outputs, weightMap);\n    expect(executionInfo.inputs).toBe(inputs);\n    expect(executionInfo.outputs).toBe(outputs);\n    expect(executionInfo.dynamicNode).toBeFalsy();\n    expect(executionInfo.missingInputs).toEqual(['input']);\n    expect(executionInfo.syncInputs).toBeFalsy();\n    expect(executionInfo.usedNodes).toContain('input');\n    expect(executionInfo.usedNodes).toContain('intermediate');\n    expect(executionInfo.usedNodes).toContain('output');\n    expect(executionInfo.usedNodes.size).toBe(3);\n  });\n\n  it('Async graph', () => {\n    const weightMap = {};\n    const graphDef: IGraphDef = {\n      node: [\n        {name: 'input', op: 'Placeholder'},\n        {name: 'intermediate', op: 'Enter', input: ['input']},\n        {name: 'intermediate2', op: 'Const', input: ['intermediate']},\n        {name: 'output', op: 'Square', input: ['intermediate2']},\n      ],\n      versions: {producer: 1.0, minConsumer: 3}\n    };\n    const graph = OperationMapper.Instance.transformGraph(graphDef);\n\n    // input --> output\n    const inputs: NamedTensorMap = {'input': scalar(0)};\n    const outputs = [graph.nodes['output']];\n    const executionInfo = getExecutionSubgraph(inputs, outputs, weightMap);\n    expect(executionInfo.inputs).toBe(inputs);\n    expect(executionInfo.outputs).toBe(outputs);\n    expect(executionInfo.dynamicNode).toBe(graph.nodes['intermediate']);\n    expect(executionInfo.missingInputs).toEqual([]);\n    expect(executionInfo.syncInputs).toEqual(['intermediate2']);\n    expect(executionInfo.usedNodes).toContain('input');\n    expect(executionInfo.usedNodes).toContain('intermediate');\n    expect(executionInfo.usedNodes).toContain('intermediate2');\n    expect(executionInfo.usedNodes).toContain('output');\n    expect(executionInfo.usedNodes.size).toBe(4);\n  });\n});\n"]}