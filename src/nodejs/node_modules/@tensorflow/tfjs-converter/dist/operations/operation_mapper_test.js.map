{"version":3,"file":"operation_mapper_test.js","sourceRoot":"","sources":["../../src/operations/operation_mapper_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nimport {OperationMapper} from './operation_mapper';\nimport {Graph} from './types';\n\nconst ops = [\n  arithmetic, basicMath, control, convolution, creation, dynamic, evaluation,\n  graph, hashTable, image, logical, matrices, normalization, reduction,\n  sliceJoin, sparse, spectral, string, transformation\n];\nconst mapper: OperationMapper = OperationMapper.Instance;\nlet convertedGraph: Graph;\n\nconst SIMPLE_MODEL: tensorflow.IGraphDef = {\n  node: [\n    {\n      name: 'image_placeholder',\n      op: 'Placeholder',\n      attr: {\n        dtype: {\n          type: tensorflow.DataType.DT_FLOAT,\n        },\n        shape: {shape: {dim: [{size: '3'}, {size: 3}, {size: '3'}, {size: 1}]}}\n      }\n    },\n    {\n      name: 'Const',\n      op: 'Const',\n      attr: {\n        dtype: {type: tensorflow.DataType.DT_INT32},\n        value: {\n          tensor: {\n            dtype: tensorflow.DataType.DT_INT32,\n            tensorShape: {dim: [{size: 3}, {size: 3}, {size: 1}, {size: 1}]},\n            intVal: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n          }\n        }\n      }\n    },\n    {\n      name: 'Shape',\n      op: 'Const',\n      attr: {\n        dtype: {type: tensorflow.DataType.DT_INT32},\n        value: {\n          tensor: {\n            dtype: tensorflow.DataType.DT_INT32,\n            tensorShape: {dim: [{size: 3}, {size: 1}, {size: 1}, {size: 1}]},\n            intVal: [1, 1, 1]\n          }\n        }\n      }\n    },\n    {\n      name: 'Value',\n      op: 'Const',\n      attr: {dtype: {type: tensorflow.DataType.DT_INT32}, value: {i: 1}}\n    },\n    {name: 'Fill', op: 'Fill', input: ['Shape', 'Value'], attr: {}},\n    {\n      name: 'Conv2D',\n      op: 'Conv2D',\n      input: ['image_placeholder', 'Const'],\n      attr: {\n        T: {type: tensorflow.DataType.DT_FLOAT},\n        dataFormat: {s: 'TkhXQw=='},\n        padding: {s: 'U0FNRQ=='},\n        strides: {list: {f: [], i: [1, 2, 2, 1]}},\n        useCudnnOnGpu: {b: true}\n      }\n    },\n    {\n      name: 'BiasAdd',\n      op: 'BiasAdd',\n      input: ['Conv2D', 'Shape'],\n      attr:\n          {T: {type: tensorflow.DataType.DT_FLOAT}, dataFormat: {s: 'TkhXQw=='}}\n    },\n    {\n      name: 'Cast',\n      op: 'Cast',\n      input: ['BiasAdd'],\n      attr: {DstT: {type: tensorflow.DataType.DT_INT64}}\n    },\n    {\n      name: 'Squeeze',\n      op: 'Squeeze',\n      input: ['Cast'],\n      attr: {squeeze_dims: {list: {i: ['1', '2']}}}\n    },\n    {\n      name: 'Squeeze2',\n      op: 'Squeeze',\n      input: ['BiasAdd'],\n      attr: {squeeze_dims: {list: {}}}\n    },\n    {\n      name: 'Split',\n      op: 'Split',\n      input: ['image_placeholder'],\n      attr: {num_split: {i: 3} as tensorflow.IAttrValue}\n    },\n    {name: 'LogicalNot', op: 'LogicalNot', input: ['image_placeholder']},\n    {\n      name: 'FusedBatchNorm',\n      op: 'FusedBatchNorm',\n      input: ['image_placeholder'],\n      attr: {epsilon: {f: 0.0001} as tensorflow.IAttrValue}\n    },\n    {\n      name: 'Cast2',\n      op: 'Cast',\n      input: ['BiasAdd'],\n      attr: {DstT: {type: tensorflow.DataType.DT_UINT8}}\n    },\n  ],\n  library: {\n    function: [\n      {\n        signature: {\n          name: '__inference_while_cond_10_49_frozen',\n          inputArg: [\n            {name: 'while_loop_counter', type: tensorflow.DataType.DT_INT32}, {\n              name: 'while_maximum_iterations',\n              type: tensorflow.DataType.DT_INT32\n            },\n            {name: 'placeholder', type: tensorflow.DataType.DT_INT32},\n            {name: 'less_y', type: tensorflow.DataType.DT_INT32}, {\n              name: 'while_cond_10___redundant_placeholder0',\n              type: tensorflow.DataType.DT_INT32\n            }\n          ],\n          outputArg: [{name: 'identity', type: tensorflow.DataType.DT_BOOL}]\n        },\n        nodeDef: [{\n          name: 'Less',\n          op: 'Less',\n          input: ['placeholder', 'less_y'],\n          attr: {T: {type: tensorflow.DataType.DT_INT32}}\n        }],\n        ret: {identity: 'Less:z:0'}\n      },\n      {\n        signature: {\n          name: '__inference_while_body_11_40_frozen',\n          inputArg: [\n            {name: 'while_loop_counter', type: tensorflow.DataType.DT_INT32}, {\n              name: 'while_maximum_iterations',\n              type: tensorflow.DataType.DT_INT32\n            },\n            {name: 'placeholder', type: tensorflow.DataType.DT_INT32},\n            {name: 'y_0', type: tensorflow.DataType.DT_INT32},\n            {name: 'add_1_z_0', type: tensorflow.DataType.DT_INT32}\n          ],\n          outputArg: [\n            {name: 'identity', type: tensorflow.DataType.DT_INT32},\n            {name: 'identity_1', type: tensorflow.DataType.DT_INT32},\n            {name: 'identity_2', type: tensorflow.DataType.DT_INT32},\n            {name: 'y', type: tensorflow.DataType.DT_INT32},\n            {name: 'add_1_z', type: tensorflow.DataType.DT_INT32}\n          ]\n        },\n        nodeDef: [\n          {\n            name: 'add_2/y',\n            op: 'Const',\n            attr: {\n              dtype: {type: tensorflow.DataType.DT_INT32},\n              value: {\n                tensor: {\n                  dtype: tensorflow.DataType.DT_INT32,\n                  tensorShape: {},\n                  intVal: [1]\n                }\n              }\n            }\n          },\n          {\n            name: 'add',\n            op: 'AddV2',\n            input: ['placeholder', 'y_0'],\n            attr: {T: {type: tensorflow.DataType.DT_INT32}}\n          },\n          {\n            name: 'add_2',\n            op: 'AddV2',\n            input: ['add_2/y:output:0', 'while_loop_counter'],\n            attr: {T: {type: tensorflow.DataType.DT_INT32}}\n          },\n          {\n            name: 'add_1',\n            op: 'AddV2',\n            input: ['add:z:0', 'add_1_z_0'],\n            attr: {T: {type: tensorflow.DataType.DT_INT32}}\n          }\n        ],\n        ret: {\n          identity_1: 'while_maximum_iterations',\n          identity_2: 'add_1:z:0',\n          y: 'y_0',\n          identity: 'add_2:z:0',\n          add_1_z: 'add_1_z_0'\n        }\n      }\n    ]\n  },\n  versions: {producer: 1.0}\n};\n\nconst SIGNATURE: tensorflow.ISignatureDef = {\n  inputs: {\n    image: {\n      name: 'image_placeholder',\n      dtype: tensorflow.DataType.DT_INT32,\n      tensorShape: {\n\n      }\n    }\n  },\n  outputs: {\n    squeeze:\n        {name: 'Squeeze', dtype: tensorflow.DataType.DT_FLOAT, tensorShape: {}}\n  }\n};\n\ndescribe('completeness check', () => {\n  it('should convert all op categories', () => {\n    ops.forEach(op => {\n      op.json.forEach(tfOp => {\n        const graph = {\n          node: [{name: tfOp.tfOpName, op: tfOp.tfOpName, attr: {}}]\n        };\n        convertedGraph = mapper.transformGraph(graph);\n        expect(Object.keys(convertedGraph.nodes)).toEqual([tfOp.tfOpName]);\n        expect(convertedGraph.nodes[tfOp.tfOpName].op).toEqual(tfOp.tfOpName);\n      });\n    });\n  });\n  it('should convert op with outputs field', () => {\n    const name = 'string split';\n    const op = 'StringSplit';\n    const graph = {node: [{name, op: 'StringSplit', attr: {}}]};\n    convertedGraph = mapper.transformGraph(graph);\n    expect(Object.keys(convertedGraph.nodes)).toEqual([name]);\n    expect(convertedGraph.nodes[name].op).toEqual(op);\n    expect(convertedGraph.nodes[name].outputs).toEqual([\n      'indices', 'values', 'shape'\n    ]);\n  });\n});\ndescribe('operationMapper without signature', () => {\n  beforeEach(() => {\n    convertedGraph = mapper.transformGraph(SIMPLE_MODEL);\n  });\n  afterEach(() => {});\n\n  describe('transform graph', () => {\n    describe('graph level', () => {\n      it('should find the graph input nodes', () => {\n        expect(convertedGraph.inputs.map(node => node.name)).toEqual([\n          'image_placeholder'\n        ]);\n      });\n\n      it('should find the graph output nodes', () => {\n        expect(convertedGraph.outputs.map(node => node.name)).toEqual([\n          'Fill', 'Squeeze', 'Squeeze2', 'Split', 'LogicalNot',\n          'FusedBatchNorm', 'Cast2'\n        ]);\n      });\n\n      it('should find the graph weight nodes', () => {\n        expect(convertedGraph.weights.map(node => node.name)).toEqual([\n          'Const', 'Shape', 'Value'\n        ]);\n      });\n\n      it('should convert nodes', () => {\n        expect(Object.keys(convertedGraph.nodes)).toEqual([\n          'image_placeholder', 'Const', 'Shape', 'Value', 'Fill', 'Conv2D',\n          'BiasAdd', 'Cast', 'Squeeze', 'Squeeze2', 'Split', 'LogicalNot',\n          'FusedBatchNorm', 'Cast2'\n        ]);\n      });\n    });\n\n    describe('function level', () => {\n      it('should convert the functions', () => {\n        expect(Object.keys(convertedGraph.functions)).toEqual([\n          '__inference_while_cond_10_49_frozen',\n          '__inference_while_body_11_40_frozen'\n        ]);\n      });\n      it('should find the graph input nodes', () => {\n        expect(convertedGraph.functions['__inference_while_cond_10_49_frozen']\n                   .inputs.map(node => node.name))\n            .toEqual([\n              'while_loop_counter', 'while_maximum_iterations', 'placeholder',\n              'less_y', 'while_cond_10___redundant_placeholder0'\n            ]);\n      });\n\n      it('should find the graph output nodes', () => {\n        expect(convertedGraph.functions['__inference_while_cond_10_49_frozen']\n                   .outputs.map(node => node.name))\n            .toEqual(['Less']);\n      });\n\n      it('should find the graph weight nodes', () => {\n        expect(convertedGraph.functions['__inference_while_cond_10_49_frozen']\n                   .weights.map(node => node.name))\n            .toEqual([]);\n      });\n\n      it('should convert nodes', () => {\n        expect(Object.keys(convertedGraph\n                               .functions['__inference_while_cond_10_49_frozen']\n                               .nodes))\n            .toEqual([\n              'Less', 'while_loop_counter', 'while_maximum_iterations',\n              'placeholder', 'less_y', 'while_cond_10___redundant_placeholder0'\n            ]);\n      });\n      it('should convert signature', () => {\n        expect(convertedGraph.functions['__inference_while_cond_10_49_frozen']\n                   .signature)\n            .toEqual({\n              methodName: '__inference_while_cond_10_49_frozen',\n              inputs: {\n                while_loop_counter: {\n                  name: 'while_loop_counter',\n                  dtype: tensorflow.DataType.DT_INT32\n                },\n                while_maximum_iterations: {\n                  name: 'while_maximum_iterations',\n                  dtype: tensorflow.DataType.DT_INT32\n                },\n                placeholder:\n                    {name: 'placeholder', dtype: tensorflow.DataType.DT_INT32},\n                less_y: {name: 'less_y', dtype: tensorflow.DataType.DT_INT32},\n                while_cond_10___redundant_placeholder0: {\n                  name: 'while_cond_10___redundant_placeholder0',\n                  dtype: tensorflow.DataType.DT_INT32\n                }\n              },\n              outputs: {\n                identity: {name: 'Less:z:0', dtype: tensorflow.DataType.DT_BOOL}\n              }\n            });\n      });\n    });\n    describe('node level', () => {\n      it('should find the input nodes', () => {\n        expect(convertedGraph.nodes['Fill'].inputs.map(node => node.name))\n            .toEqual(['Shape', 'Value']);\n      });\n      it('should find the children nodes', () => {\n        expect(convertedGraph.nodes['image_placeholder'].children.map(\n                   node => node.name))\n            .toEqual(['Conv2D', 'Split', 'LogicalNot', 'FusedBatchNorm']);\n      });\n\n      it('should map the input params', () => {\n        expect(\n            convertedGraph.nodes['Fill'].inputParams['shape'].inputIndexStart)\n            .toEqual(0);\n        expect(\n            convertedGraph.nodes['Fill'].inputParams['value'].inputIndexStart)\n            .toEqual(1);\n      });\n\n      it('should map the attribute params', () => {\n        expect(convertedGraph.nodes['Conv2D'].attrParams['strides'].value)\n            .toEqual([1, 2, 2, 1]);\n        expect(convertedGraph.nodes['Conv2D'].attrParams['pad'].value)\n            .toEqual('same');\n        expect(convertedGraph.nodes['Conv2D'].attrParams['useCudnnOnGpu'].value)\n            .toEqual(true);\n        expect(\n            convertedGraph.nodes['Split'].attrParams['numOrSizeSplits'].value)\n            .toEqual(3);\n        expect(\n            convertedGraph.nodes['FusedBatchNorm'].attrParams['epsilon'].value)\n            .toEqual(0.0001);\n        expect(convertedGraph.nodes['Squeeze2'].attrParams['axis'].value)\n            .toEqual([]);\n      });\n\n      it('should map the placeholder attribute params', () => {\n        expect(\n            convertedGraph.nodes['image_placeholder'].attrParams['shape'].value)\n            .toEqual([3, 3, 3, 1]);\n        expect(\n            convertedGraph.nodes['image_placeholder'].attrParams['dtype'].value)\n            .toEqual('float32');\n      });\n      it('should map params with deprecated name', () => {\n        expect(convertedGraph.nodes['Squeeze'].attrParams['axis'].value)\n            .toEqual([1, 2]);\n      });\n      it('should map params with int64 dtype', () => {\n        expect(convertedGraph.nodes['Cast'].attrParams['dtype'].value)\n            .toEqual('int32');\n      });\n    });\n  });\n});\ndescribe('operationMapper with signature', () => {\n  beforeEach(() => {\n    convertedGraph = mapper.transformGraph(SIMPLE_MODEL, SIGNATURE);\n  });\n  afterEach(() => {});\n\n  describe('transform graph', () => {\n    describe('graph level', () => {\n      it('should find the graph input nodes', () => {\n        expect(convertedGraph.inputs.map(node => node.name)).toEqual([\n          'image_placeholder'\n        ]);\n        expect(convertedGraph.inputs.map(node => node.signatureKey)).toEqual([\n          'image'\n        ]);\n      });\n\n      it('should find the graph output nodes', () => {\n        expect(convertedGraph.outputs.map(node => node.name)).toEqual([\n          'Squeeze'\n        ]);\n        expect(convertedGraph.outputs.map(node => node.signatureKey)).toEqual([\n          'squeeze'\n        ]);\n      });\n\n      it('should find the graph weight nodes', () => {\n        expect(convertedGraph.weights.map(node => node.name)).toEqual([\n          'Const', 'Shape', 'Value'\n        ]);\n      });\n\n      it('should convert nodes', () => {\n        expect(Object.keys(convertedGraph.nodes)).toEqual([\n          'image_placeholder', 'Const', 'Shape', 'Value', 'Fill', 'Conv2D',\n          'BiasAdd', 'Cast', 'Squeeze', 'Squeeze2', 'Split', 'LogicalNot',\n          'FusedBatchNorm', 'Cast2'\n        ]);\n      });\n    });\n\n    describe('node level', () => {\n      it('should find the input nodes', () => {\n        expect(convertedGraph.nodes['Fill'].inputs.map(node => node.name))\n            .toEqual(['Shape', 'Value']);\n      });\n      it('should find the children nodes', () => {\n        expect(convertedGraph.nodes['image_placeholder'].children.map(\n                   node => node.name))\n            .toEqual(['Conv2D', 'Split', 'LogicalNot', 'FusedBatchNorm']);\n      });\n\n      it('should map the input params', () => {\n        expect(\n            convertedGraph.nodes['Fill'].inputParams['shape'].inputIndexStart)\n            .toEqual(0);\n        expect(\n            convertedGraph.nodes['Fill'].inputParams['value'].inputIndexStart)\n            .toEqual(1);\n      });\n\n      it('should map the attribute params', () => {\n        expect(convertedGraph.nodes['Conv2D'].attrParams['strides'].value)\n            .toEqual([1, 2, 2, 1]);\n        expect(convertedGraph.nodes['Conv2D'].attrParams['pad'].value)\n            .toEqual('same');\n        expect(convertedGraph.nodes['Conv2D'].attrParams['useCudnnOnGpu'].value)\n            .toEqual(true);\n        expect(\n            convertedGraph.nodes['Split'].attrParams['numOrSizeSplits'].value)\n            .toEqual(3);\n        expect(\n            convertedGraph.nodes['FusedBatchNorm'].attrParams['epsilon'].value)\n            .toEqual(0.0001);\n        expect(convertedGraph.nodes['Squeeze2'].attrParams['axis'].value)\n            .toEqual([]);\n      });\n\n      it('should map the placeholder attribute params', () => {\n        expect(\n            convertedGraph.nodes['image_placeholder'].attrParams['shape'].value)\n            .toEqual([3, 3, 3, 1]);\n        expect(\n            convertedGraph.nodes['image_placeholder'].attrParams['dtype'].value)\n            .toEqual('float32');\n      });\n      it('should map params with deprecated name', () => {\n        expect(convertedGraph.nodes['Squeeze'].attrParams['axis'].value)\n            .toEqual([1, 2]);\n      });\n      it('should map params with int64 dtype', () => {\n        expect(convertedGraph.nodes['Cast'].attrParams['dtype'].value)\n            .toEqual('int32');\n      });\n      it('should map params with uint8 dtype', () => {\n        expect(convertedGraph.nodes['Cast2'].attrParams['dtype'].value)\n            .toEqual('int32');\n      });\n    });\n  });\n});\n"]}