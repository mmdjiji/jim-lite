{"version":3,"file":"slice_join_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/slice_join_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as slice_join from '../op_list/slice_join';\nimport {Node} from '../types';\n\nimport {executeOp} from './slice_join_executor';\nimport {createBooleanArrayAttrFromIndex, createNumberAttr, createNumberAttrFromIndex, createNumericArrayAttrFromIndex, createTensorAttr, createTensorsAttr, validateParam} from './test_helper';\n\ndescribe('slice join', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const input2 = [tfOps.scalar(2)];\n  const input3 = [tfOps.scalar(3)];\n  const input4 = [tfOps.tensor1d([3])];\n  const input5 = [tfOps.tensor1d([3, 4])];\n  const context = new ExecutionContext({}, {}, {});\n\n  describe('multi-tensor ops', () => {\n    beforeEach(() => {\n      node = {\n        name: 'test',\n        op: '',\n        category: 'slice_join',\n        inputNames: ['input1', 'input2', 'input3'],\n        inputs: [],\n        inputParams: {},\n        attrParams: {},\n        children: []\n      };\n    });\n    describe('executeOp', () => {\n      it('Concat', () => {\n        const spy = spyOn(tfOps, 'concat');\n        node.op = 'Concat';\n        node.inputParams.tensors = createTensorsAttr(1, 0);\n        node.inputParams.axis = createNumberAttrFromIndex(0);\n        node.attrParams.n = createNumberAttr(2);\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(spy).toHaveBeenCalledWith([input2[0], input3[0]], 1);\n      });\n      it('Concat when input length and n mismatch', () => {\n        const spy = spyOn(tfOps, 'concat');\n        node.op = 'Concat';\n        node.inputParams.tensors = createTensorsAttr(0, -1);\n        node.inputParams.axis = createNumberAttrFromIndex(-1);\n        node.attrParams.n = createNumberAttr(1);\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(spy).toHaveBeenCalledWith([input1[0]], 3);\n      });\n      it('should match json def for Concat', () => {\n        node.op = 'Concat';\n        node.inputParams.tensors = createTensorsAttr(1, 0);\n        node.inputParams.axis = createNumberAttrFromIndex(0);\n        node.attrParams.n = createNumberAttr(2);\n\n        expect(validateParam(node, slice_join.json, 'Concat')).toBeTruthy();\n      });\n      it('ConcatV2', () => {\n        const spy = spyOn(tfOps, 'concat');\n        node.op = 'ConcatV2';\n        node.inputParams.tensors = createTensorsAttr(0, -1);\n        node.inputParams.axis = createNumberAttrFromIndex(-1);\n        node.attrParams.n = createNumberAttr(2);\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(spy).toHaveBeenCalledWith([input1[0], input2[0]], 3);\n      });\n      it('ConcatV2 when input length and n mismatch', () => {\n        const spy = spyOn(tfOps, 'concat');\n        node.op = 'ConcatV2';\n        node.inputParams.tensors = createTensorsAttr(0, -1);\n        node.inputParams.axis = createNumberAttrFromIndex(-1);\n        node.attrParams.n = createNumberAttr(1);\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(spy).toHaveBeenCalledWith([input1[0]], 3);\n      });\n      it('should match json def for ConcatV2', () => {\n        node.op = 'ConcatV2';\n        node.inputParams.tensors = createTensorsAttr(0, -1);\n        node.inputParams.axis = createNumberAttrFromIndex(-1);\n        node.attrParams.n = createNumberAttr(3);\n\n        expect(validateParam(node, slice_join.json, 'ConcatV2')).toBeTruthy();\n      });\n      it('should call tfOps.unstack', () => {\n        const spy = spyOn(tfOps, 'unstack');\n        node.op = 'Unpack';\n        node.inputParams.tensor = createTensorAttr(0);\n        node.attrParams.axis = createNumberAttr(4);\n        executeOp(node, {input1}, context);\n\n        expect(spy).toHaveBeenCalledWith(input1[0], 4);\n      });\n      it('should match json def for unstack', () => {\n        node.op = 'Unpack';\n        node.inputParams.tensor = createTensorAttr(0);\n        node.attrParams.axis = createNumberAttr(4);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should call tfOps.stack', () => {\n        const spy = spyOn(tfOps, 'stack');\n        node.op = 'Pack';\n        node.inputParams.tensors = createTensorsAttr(0, 0);\n        node.attrParams.axis = createNumberAttr(4);\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(spy.calls.mostRecent().args[0][0]).toEqual(input1[0]);\n        expect(spy.calls.mostRecent().args[0][1]).toEqual(input2[0]);\n        expect(spy.calls.mostRecent().args[0][2]).toEqual(input3[0]);\n        expect(spy.calls.mostRecent().args[1]).toEqual(4);\n      });\n      it('should match json def for unstack', () => {\n        node.op = 'Pack';\n        node.inputParams.tensors = createTensorsAttr(0, 0);\n        node.attrParams.axis = createNumberAttr(4);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should reshape tensors for tfOps.stack', () => {\n        const spy = spyOn(tfOps, 'stack');\n        node.op = 'Pack';\n        node.inputNames = ['input1', 'input2', 'input3', 'input4'];\n        node.inputParams.tensors = createTensorsAttr(0, 0);\n        node.attrParams.axis = createNumberAttr(4);\n        executeOp(node, {input1, input2, input3, input4}, context);\n\n        expect(spy.calls.mostRecent().args[0][0]).toEqual(input1[0]);\n        expect(spy.calls.mostRecent().args[0][1]).toEqual(input2[0]);\n        expect(spy.calls.mostRecent().args[0][2]).toEqual(input3[0]);\n        expect(spy.calls.mostRecent().args[0][3].shape).toEqual([]);\n        expect(spy.calls.mostRecent().args[1]).toEqual(4);\n      });\n      it('should raise error if tensors shape does not match for tfOps.stack',\n         () => {\n           node.op = 'Pack';\n           node.inputNames = ['input1', 'input2', 'input3', 'input5'];\n           node.inputParams.tensors = createTensorsAttr(0, 0);\n           node.attrParams.axis = createNumberAttr(4);\n           expect(\n               () => executeOp(node, {input1, input2, input3, input5}, context))\n               .toThrow(new Error('the input tensors shape does not match'));\n         });\n    });\n  });\n  describe('single-tensor ops', () => {\n    beforeEach(() => {\n      node = {\n        name: 'test',\n        op: '',\n        category: 'slice_join',\n        inputNames: ['input1'],\n        inputs: [],\n        inputParams: {x: createTensorAttr(0)},\n        attrParams: {},\n        children: []\n      };\n    });\n    describe('executeOp', () => {\n      it('should call tfOps.reverse', () => {\n        spyOn(tfOps, 'reverse');\n        node.op = 'Reverse';\n        node.inputParams.dims = createBooleanArrayAttrFromIndex(1);\n        node.inputNames = ['input1', 'input6'];\n        const input6 = [tfOps.tensor1d([false, true], 'bool')];\n        executeOp(node, {input1, input6}, context);\n\n        expect(tfOps.reverse).toHaveBeenCalledWith(input1[0], [1]);\n      });\n      it('should match json def for reverse', () => {\n        node.op = 'Reverse';\n        node.inputParams.dims = createBooleanArrayAttrFromIndex(1);\n\n        expect(validateParam(node, slice_join.json, 'Reverse')).toBeTruthy();\n      });\n      it('should call tfOps.reverse', () => {\n        spyOn(tfOps, 'reverse');\n        node.op = 'ReverseV2';\n        node.inputParams.axis = createNumericArrayAttrFromIndex(1);\n        node.inputNames = ['input1', 'input4'];\n        executeOp(node, {input1, input4}, context);\n\n        expect(tfOps.reverse).toHaveBeenCalledWith(input1[0], [3]);\n      });\n      it('should match json def for reverse', () => {\n        node.op = 'ReverseV2';\n        node.inputParams.axis = createNumericArrayAttrFromIndex(1);\n\n        expect(validateParam(node, slice_join.json, 'ReverseV2')).toBeTruthy();\n      });\n      it('should call tfOps.tile', () => {\n        spyOn(tfOps, 'tile');\n        node.op = 'Tile';\n        node.inputParams.reps = createNumericArrayAttrFromIndex(1);\n        node.inputNames = ['input1', 'input4'];\n        executeOp(node, {input1, input4}, context);\n\n        expect(tfOps.tile).toHaveBeenCalledWith(input1[0], [3]);\n      });\n      it('should match json def for tile', () => {\n        node.op = 'Tile';\n        node.inputParams.reps = createNumericArrayAttrFromIndex(1);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should call tfOps.slice', () => {\n        spyOn(tfOps, 'slice');\n        node.op = 'Slice';\n        node.inputParams.begin = createNumericArrayAttrFromIndex(1);\n        node.inputParams.size = createNumericArrayAttrFromIndex(2);\n        const input6 = [tfOps.tensor1d([2], 'int32')];\n        node.inputNames = ['input1', 'input6', 'input4'];\n\n        executeOp(node, {input1, input6, input4}, context);\n\n        expect(tfOps.slice).toHaveBeenCalledWith(input1[0], [2], [3]);\n      });\n      it('should match json def for slice', () => {\n        node.op = 'Slice';\n        node.inputParams.begin = createNumericArrayAttrFromIndex(1);\n        node.inputParams.size = createNumericArrayAttrFromIndex(2);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should call tfOps.stridedSlice', () => {\n        spyOn(tfOps, 'stridedSlice');\n        node.op = 'StridedSlice';\n        node.inputParams.begin = createNumericArrayAttrFromIndex(1);\n        node.inputParams.end = createNumericArrayAttrFromIndex(2);\n        node.inputParams.strides = createNumericArrayAttrFromIndex(3);\n        node.attrParams.beginMask = createNumberAttr(4);\n        node.attrParams.endMask = createNumberAttr(5);\n        node.attrParams.ellipsisMask = createNumberAttr(1);\n        node.attrParams.newAxisMask = createNumberAttr(2);\n        node.attrParams.shrinkAxisMask = createNumberAttr(3);\n        node.inputNames = ['input1', 'input6', 'input7', 'input4'];\n        const input6 = [tfOps.tensor1d([2], 'int32')];\n        const input7 = [tfOps.tensor1d([3], 'int32')];\n        executeOp(node, {input1, input6, input7, input4}, context);\n\n        expect(tfOps.stridedSlice)\n            .toHaveBeenCalledWith(input1[0], [2], [3], [3], 4, 5, 1, 2, 3);\n      });\n      it('should match json def for stridedSlice', () => {\n        node.op = 'StridedSlice';\n        node.inputParams.begin = createNumericArrayAttrFromIndex(1);\n        node.inputParams.end = createNumericArrayAttrFromIndex(2);\n        node.inputParams.strides = createNumericArrayAttrFromIndex(3);\n        node.attrParams.beginMask = createNumberAttr(4);\n        node.attrParams.endMask = createNumberAttr(5);\n        node.attrParams.ellipsisMask = createNumberAttr(1);\n        node.attrParams.newAxisMask = createNumberAttr(2);\n        node.attrParams.shrinkAxisMask = createNumberAttr(3);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should call tfOps.gather', () => {\n        spyOn(tfOps, 'gather');\n        node.op = 'Gather';\n        node.inputParams.indices = createTensorAttr(1);\n        const input5 = [tfOps.scalar(2, 'int32')];\n        node.inputNames = ['input1', 'input5'];\n        executeOp(node, {input1, input5, input3}, context);\n\n        expect(tfOps.gather)\n            .toHaveBeenCalledWith(\n                input1[0], jasmine.objectContaining({dataId: input5[0].dataId}),\n                0);\n      });\n      it('should match json def for gather', () => {\n        node.op = 'Gather';\n        node.inputParams.indices = createTensorAttr(1);\n\n        expect(validateParam(node, slice_join.json, 'Gather')).toBeTruthy();\n      });\n      it('should call tfOps.gather', () => {\n        spyOn(tfOps, 'gather');\n        node.op = 'GatherV2';\n        node.inputParams.indices = createTensorAttr(1);\n        node.inputParams.axis = createNumberAttrFromIndex(2);\n        node.attrParams.batchDims = createNumberAttr(1);\n        const input5 = [tfOps.scalar(2, 'int32')];\n        node.inputNames = ['input1', 'input5', 'input3'];\n        executeOp(node, {input1, input5, input3}, context);\n\n        expect(tfOps.gather)\n            .toHaveBeenCalledWith(\n                input1[0], jasmine.objectContaining({dataId: input5[0].dataId}),\n                3, 1);\n      });\n\n      it('should make indices param of int32 dtype', () => {\n        spyOn(tfOps, 'gather');\n        node.op = 'Gather';\n        node.inputParams.indices = createTensorAttr(1);\n        node.inputNames = ['input1', 'input5'];\n        const input5 = [tfOps.scalar(2, 'float32')];\n        executeOp(node, {input1, input5}, context);\n\n        expect(tfOps.gather)\n            .toHaveBeenCalledWith(\n                input1[0], jasmine.objectContaining({dtype: 'int32'}), 0);\n      });\n      it('should match json def for gather', () => {\n        node.op = 'GatherV2';\n        node.inputParams.indices = createTensorAttr(1);\n        node.inputParams.axis = createNumberAttrFromIndex(2);\n        node.attrParams.batchDims = createNumberAttr(1);\n\n        expect(validateParam(node, slice_join.json, 'GatherV2')).toBeTruthy();\n      });\n      it('should call tfOps.split', () => {\n        spyOn(tfOps, 'split');\n        node.op = 'Split';\n        node.inputParams.axis = createNumberAttrFromIndex(0);\n        node.inputParams.x = createTensorAttr(1);\n        node.attrParams.numOrSizeSplits = createNumberAttr(2);\n        node.inputNames = ['input1', 'input2'];\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.split).toHaveBeenCalledWith(input2[0], 2, 1);\n      });\n      it('should match json def for split', () => {\n        node.op = 'Split';\n        node.inputParams.axis = createNumberAttrFromIndex(0);\n        node.inputParams.x = createTensorAttr(1);\n        node.attrParams.numOrSizeSplits = createNumberAttr(2);\n\n        expect(validateParam(node, slice_join.json, 'Split')).toBeTruthy();\n      });\n      it('should call tfOps.split', () => {\n        spyOn(tfOps, 'split');\n        node.op = 'SplitV';\n        node.inputParams.x = createTensorAttr(0);\n        node.inputParams.numOrSizeSplits = createNumericArrayAttrFromIndex(1);\n        node.inputParams.axis = createNumberAttrFromIndex(2);\n        node.inputNames = ['input1', 'input2', 'input3'];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.split).toHaveBeenCalledWith(input1[0], 2, 3);\n      });\n      it('should match json def for split', () => {\n        node.op = 'SplitV';\n        node.inputParams.x = createTensorAttr(0);\n        node.inputParams.numOrSizeSplits = createNumericArrayAttrFromIndex(1);\n        node.inputParams.axis = createNumberAttrFromIndex(2);\n\n        expect(validateParam(node, slice_join.json, 'SplitV')).toBeTruthy();\n      });\n      it('should call tfOps.scatterND', () => {\n        spyOn(tfOps, 'scatterND');\n        node.op = 'ScatterNd';\n        node.inputParams.indices = createTensorAttr(0);\n        node.inputParams.values = createTensorAttr(1);\n        node.inputParams.shape = createNumericArrayAttrFromIndex(2);\n        node.inputNames = ['input1', 'input2', 'input4'];\n        executeOp(node, {input1, input2, input4}, context);\n\n        expect(tfOps.scatterND).toHaveBeenCalledWith(input1[0], input2[0], [3]);\n      });\n      it('should match json def for scatterND', () => {\n        node.op = 'ScatterNd';\n        delete node.inputParams.x;\n        node.inputParams.indices = createTensorAttr(0);\n        node.inputParams.values = createTensorAttr(1);\n        node.inputParams.shape = createNumericArrayAttrFromIndex(2);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should call tfOps.gatherND', () => {\n        spyOn(tfOps, 'gatherND');\n        node.op = 'GatherNd';\n        node.inputParams.x = createTensorAttr(0);\n        node.inputParams.indices = createTensorAttr(1);\n        node.inputNames = ['input1', 'input2'];\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.gatherND).toHaveBeenCalledWith(input1[0], input2[0]);\n      });\n      it('should match json def for gatherND', () => {\n        node.op = 'GatherNd';\n        node.inputParams.x = createTensorAttr(0);\n        node.inputParams.indices = createTensorAttr(1);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n      it('should call tfOps.sparseToDense', () => {\n        spyOn(tfOps, 'sparseToDense');\n        node.op = 'SparseToDense';\n        node.inputParams.sparseIndices = createTensorAttr(0);\n        node.inputParams.outputShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.sparseValues = createTensorAttr(2);\n        node.inputParams.defaultValue = createTensorAttr(3);\n        node.inputParams.indices = createTensorAttr(1);\n        node.inputNames = ['input1', 'input4', 'input3', 'input2'];\n        executeOp(node, {input1, input2, input3, input4}, context);\n\n        expect(tfOps.sparseToDense)\n            .toHaveBeenCalledWith(input1[0], input3[0], [3], input2[0]);\n      });\n      it('should make defaultValue of same dtype as sparseValues', () => {\n        spyOn(tfOps, 'sparseToDense');\n        node.op = 'SparseToDense';\n        node.inputParams.sparseIndices = createTensorAttr(0);\n        node.inputParams.outputShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.sparseValues = createTensorAttr(2);\n        node.inputParams.defaultValue = createTensorAttr(3);\n        node.inputParams.indices = createTensorAttr(1);\n        const input5 = [tfOps.scalar(5, 'int32')];\n        node.inputNames = ['input1', 'input4', 'input3', 'input5'];\n        executeOp(node, {input1, input5, input3, input4}, context);\n\n        expect(tfOps.sparseToDense)\n            .toHaveBeenCalledWith(\n                input1[0], input3[0], [3],\n                jasmine.objectContaining({dtype: 'float32'}));\n      });\n      it('should match json def for sparseToDense', () => {\n        node.op = 'SparseToDense';\n        node.inputParams = {};\n        node.inputParams.sparseIndices = createTensorAttr(0);\n        node.inputParams.outputShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.sparseValues = createTensorAttr(2);\n        node.inputParams.defaultValue = createTensorAttr(3);\n\n        expect(validateParam(node, slice_join.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}