{"version":3,"file":"arithmetic_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/arithmetic_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {executeOp} from './arithmetic_executor';\nimport {createTensorAttr, createTensorsAttr} from './test_helper';\n\ndescribe('arithmetic', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const input2 = [tfOps.scalar(1)];\n  const input3 = [tfOps.scalar(4)];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'arithmetic',\n      inputNames: ['input1', 'input2'],\n      inputs: [],\n      inputParams: {a: createTensorAttr(0), b: createTensorAttr(1)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    ['Add', 'Mul', 'Div', 'Sub', 'Maximum', 'Minimum', 'Pow',\n     'SquaredDifference', 'Mod', 'FloorDiv', 'DivNoNan']\n        .forEach((op => {\n          it('should call tfOps.' + op, () => {\n            const spy =\n                spyOn(tfOps, op.charAt(0).toLowerCase() + op.slice(1) as 'add');\n            node.op = op;\n            executeOp(node, {input1, input2}, context);\n\n            expect(spy).toHaveBeenCalledWith(input1[0], input2[0]);\n          });\n        }));\n\n    it('AddV2', async () => {\n      const spy = spyOn(tfOps, 'add').and.callThrough();\n      node.op = 'AddV2';\n      const res = executeOp(node, {input1, input2}, context) as Tensor[];\n      expect(spy).toHaveBeenCalledWith(input1[0], input2[0]);\n      expect(res[0].dtype).toBe('float32');\n      expect(res[0].shape).toEqual([]);\n      test_util.expectArraysClose(await res[0].data(), 2);\n    });\n\n    it('AddN', async () => {\n      const spy = spyOn(tfOps, 'addN').and.callThrough();\n      node.op = 'AddN';\n      node.inputParams = {tensors: createTensorsAttr(0, 0)};\n      node.inputNames = ['input1', 'input2', 'input3'];\n      const res =\n          executeOp(node, {input1, input2, input3}, context) as Tensor[];\n      expect(spy).toHaveBeenCalledWith([input1[0], input2[0], input3[0]]);\n      expect(res[0].dtype).toBe('float32');\n      expect(res[0].shape).toEqual([]);\n      test_util.expectArraysClose(await res[0].data(), [6]);\n    });\n  });\n});\n"]}