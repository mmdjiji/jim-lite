{"version":3,"file":"spectral_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/spectral_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as spectral from '../op_list/spectral';\nimport {Node} from '../types';\n\nimport {executeOp} from './spectral_executor';\nimport {createTensorAttr, validateParam} from './test_helper';\n\ndescribe('spectral', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'spectral',\n      inputNames: ['input1'],\n      inputs: [],\n      inputParams: {x: createTensorAttr(0)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('FFT', () => {\n      it('should call tfOps.fft', () => {\n        spyOn(tfOps, 'fft');\n        node.op = 'FFT';\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.fft).toHaveBeenCalledWith(input1[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'FFT';\n\n        expect(validateParam(node, spectral.json)).toBeTruthy();\n      });\n    });\n    describe('IFFT', () => {\n      it('should call tfOps.ifft', () => {\n        spyOn(tfOps, 'ifft');\n        node.op = 'IFFT';\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.ifft).toHaveBeenCalledWith(input1[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'IFFT';\n\n        expect(validateParam(node, spectral.json)).toBeTruthy();\n      });\n    });\n    describe('RFFT', () => {\n      it('should call tfOps.rfft', () => {\n        spyOn(tfOps, 'rfft');\n        node.op = 'RFFT';\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.rfft).toHaveBeenCalledWith(input1[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'RFFT';\n\n        expect(validateParam(node, spectral.json)).toBeTruthy();\n      });\n    });\n    describe('IRFFT', () => {\n      it('should call tfOps.irfft', () => {\n        spyOn(tfOps, 'irfft');\n        node.op = 'IRFFT';\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.irfft).toHaveBeenCalledWith(input1[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'IRFFT';\n\n        expect(validateParam(node, spectral.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}