{"version":3,"file":"normalization_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/normalization_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as normalization from '../op_list/normalization';\nimport {Node} from '../types';\n\nimport {executeOp} from './normalization_executor';\nimport {createNumberAttr, createNumericArrayAttrFromIndex, createTensorAttr, validateParam} from './test_helper';\n\ndescribe('normalization', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'normalization',\n      inputNames: ['input1'],\n      inputs: [],\n      inputParams: {x: createTensorAttr(0)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('FusedBatchNorm', () => {\n      it('should call tfOps.batchNorm', () => {\n        spyOn(tfOps, 'batchNorm');\n        node.op = 'FusedBatchNorm';\n        node.inputParams.scale = createTensorAttr(1);\n        node.inputParams.offset = createTensorAttr(2);\n        node.inputParams.mean = createTensorAttr(3);\n        node.inputParams.variance = createTensorAttr(4);\n        node.attrParams.epsilon = createNumberAttr(5);\n        node.inputNames = ['input1', 'input2', 'input3', 'input4', 'input5'];\n        const input2 = [tfOps.scalar(1)];\n        const input3 = [tfOps.scalar(2)];\n        const input4 = [tfOps.scalar(3)];\n        const input5 = [tfOps.scalar(4)];\n        executeOp(node, {input1, input2, input3, input4, input5}, context);\n\n        expect(tfOps.batchNorm)\n            .toHaveBeenCalledWith(\n                input1[0], input4[0], input5[0], input3[0], input2[0], 5);\n      });\n    });\n    describe('FusedBatchNormV2', () => {\n      it('should call tfOps.batchNorm', () => {\n        spyOn(tfOps, 'batchNorm');\n        node.op = 'FusedBatchNormV2';\n        node.inputParams.scale = createTensorAttr(1);\n        node.inputParams.offset = createTensorAttr(2);\n        node.inputParams.mean = createTensorAttr(3);\n        node.inputParams.variance = createTensorAttr(4);\n        node.attrParams.epsilon = createNumberAttr(5);\n        node.inputNames = ['input1', 'input2', 'input3', 'input4', 'input5'];\n        const input2 = [tfOps.scalar(1)];\n        const input3 = [tfOps.scalar(2)];\n        const input4 = [tfOps.scalar(3)];\n        const input5 = [tfOps.scalar(4)];\n        executeOp(node, {input1, input2, input3, input4, input5}, context);\n\n        expect(tfOps.batchNorm)\n            .toHaveBeenCalledWith(\n                input1[0], input4[0], input5[0], input3[0], input2[0], 5);\n      });\n    });\n    describe('FusedBatchNormV3', () => {\n      it('should call tfOps.batchNorm', () => {\n        spyOn(tfOps, 'batchNorm');\n        node.op = 'FusedBatchNormV3';\n        node.inputParams.scale = createTensorAttr(1);\n        node.inputParams.offset = createTensorAttr(2);\n        node.inputParams.mean = createTensorAttr(3);\n        node.inputParams.variance = createTensorAttr(4);\n        node.attrParams.epsilon = createNumberAttr(5);\n        node.inputNames = ['input1', 'input2', 'input3', 'input4', 'input5'];\n        const input2 = [tfOps.scalar(1)];\n        const input3 = [tfOps.scalar(2)];\n        const input4 = [tfOps.scalar(3)];\n        const input5 = [tfOps.scalar(4)];\n        executeOp(node, {input1, input2, input3, input4, input5}, context);\n\n        expect(tfOps.batchNorm)\n            .toHaveBeenCalledWith(\n                input1[0], input4[0], input5[0], input3[0], input2[0], 5);\n      });\n    });\n    describe('LRN', () => {\n      it('should call tfOps.localResponseNormalization', () => {\n        spyOn(tfOps, 'localResponseNormalization');\n        node.op = 'LRN';\n        node.attrParams.radius = createNumberAttr(1);\n        node.attrParams.bias = createNumberAttr(2);\n        node.attrParams.alpha = createNumberAttr(3);\n        node.attrParams.beta = createNumberAttr(4);\n\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.localResponseNormalization)\n            .toHaveBeenCalledWith(input1[0], 1, 2, 3, 4);\n      });\n      it('should match json def', () => {\n        node.op = 'LRN';\n        node.attrParams.radius = createNumberAttr(1);\n        node.attrParams.bias = createNumberAttr(2);\n        node.attrParams.alpha = createNumberAttr(3);\n        node.attrParams.beta = createNumberAttr(4);\n\n        expect(validateParam(node, normalization.json)).toBeTruthy();\n      });\n    });\n\n    describe('Softmax', () => {\n      it('should call tfOps.softmax', () => {\n        spyOn(tfOps, 'softmax');\n        node.op = 'Softmax';\n\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.softmax).toHaveBeenCalledWith(input1[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'Softmax';\n\n        expect(validateParam(node, normalization.json)).toBeTruthy();\n      });\n    });\n\n    describe('LogSoftmax', () => {\n      it('should call tfOps.logSoftmax', () => {\n        spyOn(tfOps, 'logSoftmax');\n        node.op = 'LogSoftmax';\n\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.logSoftmax).toHaveBeenCalledWith(input1[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'LogSoftmax';\n\n        expect(validateParam(node, normalization.json)).toBeTruthy();\n      });\n    });\n    describe('SparseToDense', () => {\n      it('should call tfOps.sparseToDense', () => {\n        spyOn(tfOps, 'sparseToDense');\n        node.op = 'SparseToDense';\n        node.inputParams.sparseIndices = createTensorAttr(0);\n        node.inputParams.outputShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.sparseValues = createTensorAttr(2);\n        node.inputParams.defaultValue = createTensorAttr(3);\n        node.inputNames = ['input1', 'input2', 'input3', 'input4'];\n        const input2 = [tfOps.tensor1d([1], 'int32')];\n        const input3 = [tfOps.scalar(2)];\n        const input4 = [tfOps.scalar(3)];\n        executeOp(node, {input1, input2, input3, input4}, context);\n\n        expect(tfOps.sparseToDense)\n            .toHaveBeenCalledWith(input1[0], [1], input3[0], input4[0]);\n      });\n      it('should match json def', () => {\n        node.op = 'SparseToDense';\n        delete node.inputParams.x;\n        node.inputParams.sparseIndices = createTensorAttr(0);\n        node.inputParams.outputShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.sparseValues = createTensorAttr(2);\n        node.inputParams.defaultValue = createTensorAttr(3);\n\n        expect(validateParam(node, normalization.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}