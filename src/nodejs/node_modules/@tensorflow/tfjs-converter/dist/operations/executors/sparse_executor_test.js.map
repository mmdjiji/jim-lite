{"version":3,"file":"sparse_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/sparse_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as sparse from '../op_list/sparse';\nimport {Node} from '../types';\n\nimport {executeOp} from './sparse_executor';\nimport {createTensorAttr, validateParam} from './test_helper';\n\ndescribe('sparse', () => {\n  let node: Node;\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'sparse',\n      inputNames: [],\n      inputs: [],\n      inputParams: {},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('SparseFillEmptyRows', () => {\n      it('should call tfOps.sparse.sparseFillEmptyRows', async () => {\n        spyOn(tfOps.sparse, 'sparseFillEmptyRows').and.callThrough();\n        node.op = 'SparseFillEmptyRows';\n        node.inputParams = {\n          indices: createTensorAttr(0),\n          values: createTensorAttr(1),\n          denseShape: createTensorAttr(2),\n          defaultValue: createTensorAttr(3)\n        };\n        node.inputNames = ['indices', 'values', 'denseShape', 'defaultValue'];\n\n        const indices = [tfOps.tensor2d(\n            [0, 0, 1, 0, 1, 3, 1, 4, 3, 2, 3, 3], [6, 2], 'int32')];\n        const values = [tfOps.tensor1d([0, 10, 13, 14, 32, 33], 'int32')];\n        const denseShape = [tfOps.tensor1d([5, 6], 'int32')];\n        const defaultValue = [tfOps.scalar(-1, 'int32')];\n        const result = executeOp(\n                           node, {indices, values, denseShape, defaultValue},\n                           context) as Tensor[];\n\n        expect(tfOps.sparse.sparseFillEmptyRows)\n            .toHaveBeenCalledWith(\n                indices[0], values[0], denseShape[0], defaultValue[0]);\n        test_util.expectArraysClose(\n            await result[0].data(),\n            [0, 0, 1, 0, 1, 3, 1, 4, 2, 0, 3, 2, 3, 3, 4, 0]);\n        test_util.expectArraysClose(\n            await result[1].data(), [0, 10, 13, 14, -1, 32, 33, -1]);\n        test_util.expectArraysClose(await result[2].data(), [0, 0, 1, 0, 1]);\n        test_util.expectArraysClose(await result[3].data(), [0, 1, 2, 3, 5, 6]);\n      });\n      it('should match json def', () => {\n        node.op = 'SparseFillEmptyRows';\n        node.inputParams = {\n          indices: createTensorAttr(0),\n          values: createTensorAttr(1),\n          denseShape: createTensorAttr(2),\n          defaultValue: createTensorAttr(3)\n        };\n\n        expect(validateParam(node, sparse.json)).toBeTruthy();\n      });\n    });\n    describe('SparseReshape', () => {\n      it('should call tfOps.sparse.sparseReshape', async () => {\n        spyOn(tfOps.sparse, 'sparseReshape').and.callThrough();\n        node.op = 'SparseReshape';\n        node.inputParams = {\n          inputIndices: createTensorAttr(0),\n          inputShape: createTensorAttr(1),\n          newShape: createTensorAttr(2)\n        };\n        node.inputNames = ['inputIndices', 'inputShape', 'newShape'];\n\n        const inputIndices = [tfOps.tensor2d(\n            [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3], [5, 3], 'int32')];\n        const inputShape = [tfOps.tensor1d([2, 3, 6], 'int32')];\n        const newShape = [tfOps.tensor1d([9, -1], 'int32')];\n        const result =\n            executeOp(node, {inputIndices, inputShape, newShape}, context) as\n            Tensor[];\n\n        expect(tfOps.sparse.sparseReshape)\n            .toHaveBeenCalledWith(inputIndices[0], inputShape[0], newShape[0]);\n        test_util.expectArraysClose(\n            await result[0].data(), [0, 0, 0, 1, 1, 2, 4, 2, 8, 1]);\n        test_util.expectArraysClose(await result[1].data(), [9, 4]);\n      });\n\n      it('should match json def', () => {\n        node.op = 'SparseReshape';\n        node.inputParams = {\n          inputIndices: createTensorAttr(0),\n          inputShape: createTensorAttr(1),\n          newShape: createTensorAttr(2)\n        };\n\n        expect(validateParam(node, sparse.json)).toBeTruthy();\n      });\n    });\n    describe('SparseSegmentMean', () => {\n      it('should call tfOps.sparse.sparseSegmentMean', async () => {\n        spyOn(tfOps.sparse, 'sparseSegmentMean').and.callThrough();\n        node.op = 'SparseSegmentMean';\n        node.inputParams = {\n          data: createTensorAttr(0),\n          indices: createTensorAttr(1),\n          segmentIds: createTensorAttr(2)\n        };\n        node.inputNames = ['data', 'indices', 'segmentIds'];\n\n        const data = [tfOps.tensor2d(\n            [1, 2, 3, 4, -1, -2, -3, -4, 6, 7, 8, 9], [3, 4], 'float32')];\n        const indices = [tfOps.tensor1d([0, 1, 2], 'int32')];\n        const segmentIds = [tfOps.tensor1d([0, 1, 1], 'int32')];\n        const result =\n            executeOp(node, {data, indices, segmentIds}, context) as Tensor[];\n\n        expect(tfOps.sparse.sparseSegmentMean)\n            .toHaveBeenCalledWith(data[0], indices[0], segmentIds[0]);\n        test_util.expectArraysClose(\n            await result[0].data(), [1.0, 2.0, 3.0, 4.0, 2.5, 2.5, 2.5, 2.5]);\n      });\n      it('should match json def', () => {\n        node.op = 'SparseSegmentMean';\n        node.inputParams = {\n          data: createTensorAttr(0),\n          indices: createTensorAttr(1),\n          segmentIds: createTensorAttr(2)\n        };\n\n        expect(validateParam(node, sparse.json)).toBeTruthy();\n      });\n    });\n    describe('SparseSegmentSum', () => {\n      it('should call tfOps.sparse.sparseSegmentSum', async () => {\n        spyOn(tfOps.sparse, 'sparseSegmentSum').and.callThrough();\n        node.op = 'SparseSegmentSum';\n        node.inputParams = {\n          data: createTensorAttr(0),\n          indices: createTensorAttr(1),\n          segmentIds: createTensorAttr(2)\n        };\n        node.inputNames = ['data', 'indices', 'segmentIds'];\n\n        const data = [tfOps.tensor2d(\n            [1, 2, 3, 4, -1, -2, -3, -4, 5, 6, 7, 8], [3, 4], 'int32')];\n        const indices = [tfOps.tensor1d([0, 1], 'int32')];\n        const segmentIds = [tfOps.tensor1d([0, 0], 'int32')];\n        const result =\n            executeOp(node, {data, indices, segmentIds}, context) as Tensor[];\n\n        expect(tfOps.sparse.sparseSegmentSum)\n            .toHaveBeenCalledWith(data[0], indices[0], segmentIds[0]);\n        test_util.expectArraysClose(await result[0].data(), [0, 0, 0, 0]);\n      });\n      it('should match json def', () => {\n        node.op = 'SparseSegmentSum';\n        node.inputParams = {\n          data: createTensorAttr(0),\n          indices: createTensorAttr(1),\n          segmentIds: createTensorAttr(2)\n        };\n\n        expect(validateParam(node, sparse.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}