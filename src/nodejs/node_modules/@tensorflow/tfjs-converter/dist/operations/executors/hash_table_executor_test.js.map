{"version":3,"file":"hash_table_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/hash_table_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport {memory, test_util} from '@tensorflow/tfjs-core';\n\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport * as hashTable from '../op_list/hash_table';\nimport {Node} from '../types';\n\nimport {executeOp} from './hash_table_executor';\nimport {createDtypeAttr, createTensorAttr, validateParam} from './test_helper';\n\ndescribe('hash_table', () => {\n  let node: Node;\n  const context = new ExecutionContext({}, {}, {});\n  let resourceManager: ResourceManager;\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'hash_table',\n      inputNames: [],\n      inputs: [],\n      inputParams: {},\n      attrParams: {},\n      children: []\n    };\n    resourceManager = new ResourceManager();\n  });\n\n  afterEach(() => {\n    resourceManager.dispose();\n  });\n\n  describe('executeOp', () => {\n    describe('HashTable', () => {\n      it('should create new tensor on the resourceManager.', async () => {\n        node.op = 'HashTable';\n        node.attrParams['keyDType'] = createDtypeAttr('string');\n        node.attrParams['valueDType'] = createDtypeAttr('float32');\n\n        const before = memory().numTensors;\n        const handle = (await executeOp(node, {}, context, resourceManager))[0];\n        const after = memory().numTensors;\n        // 1 handle is created.\n        expect(after).toBe(before + 1);\n        expect(resourceManager.getHashTableById(handle.id)).toBeDefined();\n        expect(Object.keys(resourceManager.hashTableMap).length).toBe(1);\n      });\n      it('should match json def.', () => {\n        node.op = 'HashTable';\n        node.attrParams['keyDType'] = createDtypeAttr('string');\n        node.attrParams['valueDType'] = createDtypeAttr('float32');\n\n        expect(validateParam(node, hashTable.json)).toBeTruthy();\n      });\n    });\n\n    describe('HashTableV2', () => {\n      it('should create new tensor on the resourceManager.', async () => {\n        node.op = 'HashTableV2';\n        node.attrParams['keyDType'] = createDtypeAttr('string');\n        node.attrParams['valueDType'] = createDtypeAttr('float32');\n\n        const before = memory().numTensors;\n        const handle = (await executeOp(node, {}, context, resourceManager))[0];\n        const after = memory().numTensors;\n        // 1 handle is created.\n        expect(after).toBe(before + 1);\n        expect(resourceManager.getHashTableById(handle.id)).toBeDefined();\n        expect(Object.keys(resourceManager.hashTableMap).length).toBe(1);\n      });\n      it('should match json def.', () => {\n        node.op = 'HashTableV2';\n        node.attrParams['keyDType'] = createDtypeAttr('string');\n        node.attrParams['valueDType'] = createDtypeAttr('float32');\n\n        expect(validateParam(node, hashTable.json)).toBeTruthy();\n      });\n    });\n\n    describe('LookupTableImport', () => {\n      it('should return hashTable handle.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        node.op = 'LookupTableImport';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['values'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d(['a'], 'string')];\n        const input5 = [tfOps.tensor1d([5.5])];\n\n        const before = memory().numTensors;\n        (await executeOp(node, {input3, input5}, context, resourceManager));\n        const after = memory().numTensors;\n        expect(after).toBe(before + 1);\n      });\n\n      it('should throw if dtype doesnot match.', async (done) => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        node.op = 'LookupTableImport';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['values'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d([1])];\n        const input5 = [tfOps.tensor1d([5.5])];\n\n        const before = memory().numTensors;\n        try {\n          await executeOp(node, {input3, input5}, context, resourceManager);\n          done.fail('Should fail, succeed unexpectedly.');\n        } catch (err) {\n          expect(err).toMatch(/Expect key dtype/);\n        }\n        const after = memory().numTensors;\n        expect(after).toBe(before);\n        done();\n      });\n\n      it('should throw if length of keys and values doesnot match.',\n         async (done) => {\n           const hashTable = new HashTable('string', 'float32');\n\n           resourceManager.addHashTable('hashtable', hashTable);\n\n           node.op = 'LookupTableImport';\n           node.inputParams['tableHandle'] = createTensorAttr(0);\n           node.inputParams['keys'] = createTensorAttr(1);\n           node.inputParams['values'] = createTensorAttr(2);\n           node.inputNames = ['hashtable', 'input3', 'input5'];\n           const input3 = [tfOps.tensor1d(['a', 'b'])];\n           const input5 = [tfOps.tensor1d([5.5])];\n\n           const before = memory().numTensors;\n           try {\n             await executeOp(node, {input3, input5}, context, resourceManager);\n             done.fail('Should fail, succeed unexpectedly.');\n           } catch (err) {\n             expect(err).toMatch(/The number of elements doesn't match/);\n           }\n           const after = memory().numTensors;\n           expect(after).toBe(before);\n           done();\n         });\n\n      it('should match json def.', () => {\n        node.op = 'LookupTableImport';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['values'] = createTensorAttr(2);\n\n        expect(validateParam(node, hashTable.json)).toBeTruthy();\n      });\n    });\n\n    describe('LookupTableImportV2', () => {\n      it('should return hashTable handle.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        node.op = 'LookupTableImportV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['values'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d(['a'], 'string')];\n        const input5 = [tfOps.tensor1d([5.5])];\n\n        const before = memory().numTensors;\n        (await executeOp(node, {input3, input5}, context, resourceManager));\n        const after = memory().numTensors;\n        expect(after).toBe(before + 1);\n      });\n\n      it('should throw if dtype doesnot match.', async (done) => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        node.op = 'LookupTableImportV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['values'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d([1])];\n        const input5 = [tfOps.tensor1d([5.5])];\n\n        const before = memory().numTensors;\n        try {\n          await executeOp(node, {input3, input5}, context, resourceManager);\n          done.fail('Should fail, succeed unexpectedly.');\n        } catch (err) {\n          expect(err).toMatch(/Expect key dtype/);\n        }\n        const after = memory().numTensors;\n        expect(after).toBe(before);\n        done();\n      });\n\n      it('should throw if length of keys and values doesnot match.',\n         async (done) => {\n           const hashTable = new HashTable('string', 'float32');\n\n           resourceManager.addHashTable('hashtable', hashTable);\n\n           node.op = 'LookupTableImportV2';\n           node.inputParams['tableHandle'] = createTensorAttr(0);\n           node.inputParams['keys'] = createTensorAttr(1);\n           node.inputParams['values'] = createTensorAttr(2);\n           node.inputNames = ['hashtable', 'input3', 'input5'];\n           const input3 = [tfOps.tensor1d(['a', 'b'])];\n           const input5 = [tfOps.tensor1d([5.5])];\n\n           const before = memory().numTensors;\n           try {\n             await executeOp(node, {input3, input5}, context, resourceManager);\n             done.fail('Should fail, succeed unexpectedly.');\n           } catch (err) {\n             expect(err).toMatch(/The number of elements doesn't match/);\n           }\n           const after = memory().numTensors;\n           expect(after).toBe(before);\n           done();\n         });\n\n      it('should match json def.', () => {\n        node.op = 'LookupTableImportV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['values'] = createTensorAttr(2);\n\n        expect(validateParam(node, hashTable.json)).toBeTruthy();\n      });\n    });\n\n    describe('LookupTableFind', () => {\n      it('should find the value from hashtable.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtable', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n\n        const keys = [tfOps.tensor1d(['a'], 'string')];\n        const values = [tfOps.tensor1d([5.5])];\n\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableFind';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['defaultValue'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d(['a', 'b'], 'string')];\n        const input5 = [tfOps.scalar(0)];\n\n        const before = memory().numTensors;\n\n        const result =\n            (await executeOp(node, {input3, input5}, context, resourceManager));\n        const after = memory().numTensors;\n        test_util.expectArraysClose(await result[0].data(), [5.5, 0]);\n\n        // Create a result tensor.\n        expect(after).toBe(before + 1);\n      });\n      it('should throw if dtype doesnot match.', async (done) => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtable', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n\n        const keys = [tfOps.tensor1d(['a'], 'string')];\n        const values = [tfOps.tensor1d([5.5])];\n\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableFind';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['defaultValue'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d([1, 2], 'float32')];\n        const input5 = [tfOps.scalar(0)];\n\n        const before = memory().numTensors;\n        try {\n          await executeOp(node, {input3, input5}, context, resourceManager);\n          done.fail('Shoudl fail, succeed unexpectedly.');\n        } catch (err) {\n          expect(err).toMatch(/Expect key dtype/);\n        }\n        const after = memory().numTensors;\n        expect(after).toBe(before);\n        done();\n      });\n      it('should match json def.', () => {\n        node.op = 'LookupTableFind';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['defaultValue'] = createTensorAttr(2);\n\n        expect(validateParam(node, hashTable.json)).toBeTruthy();\n      });\n    });\n\n    describe('LookupTableFindV2', () => {\n      it('should find the value from hashtable.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtable', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n\n        const keys = [tfOps.tensor1d(['a'], 'string')];\n        const values = [tfOps.tensor1d([5.5])];\n\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableFindV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['defaultValue'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d(['a', 'b'], 'string')];\n        const input5 = [tfOps.scalar(0)];\n\n        const before = memory().numTensors;\n\n        const result =\n            (await executeOp(node, {input3, input5}, context, resourceManager));\n        const after = memory().numTensors;\n        test_util.expectArraysClose(await result[0].data(), [5.5, 0]);\n\n        // Create a result tensor.\n        expect(after).toBe(before + 1);\n      });\n      it('should throw if dtype doesnot match.', async (done) => {\n        const hashTable = new HashTable('string', 'float32');\n\n        resourceManager.addHashTable('hashtable', hashTable);\n\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtable', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n\n        const keys = [tfOps.tensor1d(['a'], 'string')];\n        const values = [tfOps.tensor1d([5.5])];\n\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableFindV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['defaultValue'] = createTensorAttr(2);\n        node.inputNames = ['hashtable', 'input3', 'input5'];\n        const input3 = [tfOps.tensor1d([1, 2], 'float32')];\n        const input5 = [tfOps.scalar(0)];\n\n        const before = memory().numTensors;\n        try {\n          await executeOp(node, {input3, input5}, context, resourceManager);\n          done.fail('Shoudl fail, succeed unexpectedly.');\n        } catch (err) {\n          expect(err).toMatch(/Expect key dtype/);\n        }\n        const after = memory().numTensors;\n        expect(after).toBe(before);\n        done();\n      });\n      it('should match json def.', () => {\n        node.op = 'LookupTableFindV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputParams['keys'] = createTensorAttr(1);\n        node.inputParams['defaultValue'] = createTensorAttr(2);\n\n        expect(validateParam(node, hashTable.json)).toBeTruthy();\n      });\n    });\n    describe('LookupTableSize', () => {\n      it('should return 0 if the hashtable is empty.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n        resourceManager.addHashTable('hashtablesize', hashTable);\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtablesize', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n        // Import empty tensors\n        const keys = [tfOps.tensor1d([], 'string')];\n        const values = [tfOps.tensor1d([])];\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableSize';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputNames = ['hashtablesize'];\n        const before = memory().numTensors;\n        const result = await executeOp(node, {}, context, resourceManager);\n        const after = memory().numTensors;\n        const size = await result[0].data();\n\n        test_util.expectArraysClose(size, [0]);\n        expect(after).toBe(before + 1);\n      });\n      it('should return the number of elements in the hashtable.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n        resourceManager.addHashTable('hashtablesize', hashTable);\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtablesize', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n        // Import tensors with 2 elements\n        const keys = [tfOps.tensor1d(['a', 'b'], 'string')];\n        const values = [tfOps.tensor1d([5.5, 10])];\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableSize';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputNames = ['hashtablesize'];\n        const before = memory().numTensors;\n        const result = await executeOp(node, {}, context, resourceManager);\n        const after = memory().numTensors;\n        const size = await result[0].data();\n\n        test_util.expectArraysClose(size, [2]);\n        expect(after).toBe(before + 1);\n      });\n    });\n    describe('LookupTableSizeV2', () => {\n      it('should return 0 if the hashtable is empty.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n        resourceManager.addHashTable('hashtablesize', hashTable);\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtablesize', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n        // Import empty tensors\n        const keys = [tfOps.tensor1d([], 'string')];\n        const values = [tfOps.tensor1d([])];\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableSizeV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputNames = ['hashtablesize'];\n        const before = memory().numTensors;\n        const result = await executeOp(node, {}, context, resourceManager);\n        const after = memory().numTensors;\n        const size = await result[0].data();\n\n        test_util.expectArraysClose(size, [0]);\n        expect(after).toBe(before + 1);\n      });\n      it('should return the number of elements in the hashtable.', async () => {\n        const hashTable = new HashTable('string', 'float32');\n        resourceManager.addHashTable('hashtablesize', hashTable);\n        const importNode: Node = {\n          name: 'importv2',\n          op: 'LookupTableImportV2',\n          category: 'hash_table',\n          inputNames: ['hashtablesize', 'keys', 'values'],\n          inputs: [],\n          inputParams: {\n            tableHandle: createTensorAttr(0),\n            keys: createTensorAttr(1),\n            values: createTensorAttr(2)\n          },\n          attrParams: {},\n          children: []\n        };\n        // Import tensors with 2 elements\n        const keys = [tfOps.tensor1d(['a', 'b'], 'string')];\n        const values = [tfOps.tensor1d([5.5, 10])];\n        (await executeOp(importNode, {keys, values}, context, resourceManager));\n\n        node.op = 'LookupTableSizeV2';\n        node.inputParams['tableHandle'] = createTensorAttr(0);\n        node.inputNames = ['hashtablesize'];\n        const before = memory().numTensors;\n        const result = await executeOp(node, {}, context, resourceManager);\n        const after = memory().numTensors;\n        const size = await result[0].data();\n\n        test_util.expectArraysClose(size, [2]);\n        expect(after).toBe(before + 1);\n      });\n    });\n  });\n});\n"]}