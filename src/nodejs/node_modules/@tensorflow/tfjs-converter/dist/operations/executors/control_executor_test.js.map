{"version":3,"file":"control_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/control_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {scalar, Tensor, tensor1d, tensor2d, test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {GraphExecutor} from '../../executor/graph_executor';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {TensorList} from '../../executor/tensor_list';\nimport * as control from '../op_list/control';\nimport {Graph, Node} from '../types';\n\nimport {executeOp} from './control_executor';\nimport {createBoolAttr, createDtypeAttr, createNumberAttrFromIndex, createNumericArrayAttrFromIndex, createStrAttr, createTensorAttr, createTensorsAttr, createTensorShapeAttr, validateParam} from './test_helper';\nimport {createShapeAttrFromIndex} from './test_helper';\n\ndescribe('control', () => {\n  let node: Node;\n  let input1: Tensor[];\n  let input2: Tensor[];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'control',\n      inputNames: ['input1', 'pred'],\n      inputs: [],\n      inputParams: {},\n      attrParams: {},\n      children: []\n    };\n    input1 = [tfOps.scalar(1, 'int32')];\n    input2 = [tfOps.scalar(0, 'bool')];\n  });\n\n  afterEach(() => {\n    input1[0].dispose();\n    input2[0].dispose();\n  });\n\n  describe('executeOp', () => {\n    describe('Switch', () => {\n      it('should set the output condition is true', async () => {\n        node.op = 'Switch';\n        node.inputParams['pred'] = createTensorAttr(1);\n        node.inputParams['data'] = createTensorAttr(0);\n\n        const pred = [tfOps.scalar(true)];\n        const result = await executeOp(node, {pred, input1}, context);\n        expect(result[0]).toBeUndefined();\n        test_util.expectArraysEqual(\n            await result[1].array(), await input1[0].array());\n      });\n      it('should set the output condition is false', async () => {\n        node.op = 'Switch';\n        node.inputParams['pred'] = createTensorAttr(1);\n        node.inputParams['data'] = createTensorAttr(0);\n\n        const pred = [tfOps.scalar(false)];\n        const result = await executeOp(node, {pred, input1}, context);\n        test_util.expectArraysEqual(\n            await result[0].array(), await input1[0].array());\n        expect(result[1]).toBeUndefined();\n      });\n      it('should match json def', () => {\n        node.op = 'Switch';\n        node.inputParams['pred'] = createTensorAttr(1);\n        node.inputParams['data'] = createTensorAttr(0);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n    describe('Merge', () => {\n      it('should return the first available input', async () => {\n        node.op = 'Merge';\n\n        const pred = [tfOps.scalar(true)];\n        test_util.expectArraysEqual(\n            await (await executeOp(node, {pred: undefined, input1}, context))[0]\n                .array(),\n            await input1[0].array());\n        test_util.expectArraysEqual(\n            await (await executeOp(node, {pred, input1: undefined}, context))[0]\n                .array(),\n            await pred[0].array());\n      });\n      it('should return undefined if no inputs are available', async () => {\n        node.op = 'Merge';\n        expect(await executeOp(\n                   node, {pred: undefined, input1: undefined}, context))\n            .toEqual(undefined);\n      });\n      it('should match json def', () => {\n        node.op = 'Merge';\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('Enter', () => {\n      it('should call enterFrame on context', async () => {\n        spyOn(context, 'enterFrame');\n        node.op = 'Enter';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.attrParams['frameName'] = createStrAttr('test');\n        node.inputNames = ['input1'];\n\n        test_util.expectArraysEqual(\n            await (await executeOp(node, {input1}, context))[0].array(),\n            await input1[0].array());\n        expect(context.enterFrame).toHaveBeenCalled();\n      });\n      it('should match json def', () => {\n        node.op = 'Enter';\n        node.inputParams['tensor'] = createTensorAttr(0);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n    describe('Exit', () => {\n      it('should call existFrame on context', async () => {\n        spyOn(context, 'exitFrame');\n        node.op = 'Exit';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputNames = ['input1'];\n\n        test_util.expectArraysEqual(\n            await (await executeOp(node, {input1}, context))[0].array(),\n            await input1[0].array());\n        expect(context.exitFrame).toHaveBeenCalled();\n      });\n      it('should match json def', () => {\n        node.op = 'Exit';\n        node.inputParams['tensor'] = createTensorAttr(0);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n    describe('NextIteration', () => {\n      it('should call nextIteration on context', async () => {\n        spyOn(context, 'nextIteration');\n        node.op = 'NextIteration';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputNames = ['input1'];\n\n        test_util.expectArraysEqual(\n            await (await executeOp(node, {input1}, context))[0].array(),\n            await input1[0].array());\n        expect(context.nextIteration).toHaveBeenCalled();\n      });\n      it('should match json def', () => {\n        node.op = 'NextIteration';\n        node.inputParams['tensor'] = createTensorAttr(0);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayV3', () => {\n      it('should create new tensor on the context', async () => {\n        node.op = 'TensorArrayV3';\n        node.inputParams['size'] = createNumberAttrFromIndex(0);\n        node.attrParams['name'] = createStrAttr('');\n        node.attrParams['dtype'] = createDtypeAttr('int32');\n        node.attrParams['elementShape'] = createTensorShapeAttr([10, 10]);\n        node.attrParams['dynamicSize'] = createBoolAttr(false);\n        node.attrParams['clearAfterRead'] = createBoolAttr(true);\n        node.attrParams['identicalElementShapes'] = createBoolAttr(true);\n        node.inputNames = ['input1'];\n\n        const tensorId = (await executeOp(node, {input1}, context))[0];\n        expect(context.getTensorArray(tensorId.id)).toBeDefined();\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArrayV3';\n        node.inputParams['size'] = createNumberAttrFromIndex(0);\n        node.attrParams['name'] = createStrAttr('');\n        node.attrParams['dtype'] = createDtypeAttr('int32');\n        node.attrParams['elementShape'] = createTensorShapeAttr([10, 10]);\n        node.attrParams['dynamicSize'] = createBoolAttr(false);\n        node.attrParams['clearAfterRead'] = createBoolAttr(true);\n        node.attrParams['identicalElementShapes'] = createBoolAttr(true);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayWriteV3', () => {\n      it('should write the tensor to tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [], true, false, true);\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArrayWriteV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputParams['tensor'] = createTensorAttr(2);\n        node.inputNames = ['input2', 'input3', 'input1'];\n        const input2 = [tensorArray.idTensor];\n        const input3 = [scalar(0)];\n        await executeOp(node, {input1, input2, input3}, context);\n\n        expect(tensorArray.size()).toEqual(1);\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArrayWriteV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputParams['tensor'] = createTensorAttr(2);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayReadV3', () => {\n      it('should read the tensor from tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [3], true, false, true);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        tensorArray.write(0, input4);\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArrayReadV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputNames = ['input2', 'input3'];\n        const input2 = [tensorArray.idTensor];\n        const input3 = [scalar(0)];\n        const read = await executeOp(node, {input1, input2, input3}, context);\n\n        test_util.expectArraysClose(\n            await read[0].array(), await input4.array());\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArrayReadV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayGatherV3', () => {\n      it('should gather the tensors from tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [3], true, false, true);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        const input5 = tensor1d([1, 1, 1], 'int32');\n        tensorArray.writeMany([0, 1], [input4, input5]);\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArrayGatherV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.attrParams['dtype'] = createDtypeAttr('int32');\n        node.inputNames = ['input2', 'input3'];\n        const input2 = [tensorArray.idTensor];\n        const input3 = [tensor1d([0, 1])];\n        const gather = await executeOp(node, {input2, input3}, context);\n        expect(gather.length).toEqual(1);\n        expect(gather[0].shape).toEqual([2, 3]);\n        test_util.expectArraysClose(\n            gather[0].dataSync(), new Int32Array([0, 0, 0, 1, 1, 1]));\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArrayGatherV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.attrParams['dtype'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayScatterV3', () => {\n      it('should scatter the tensor to tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [3], true, false, true);\n        const input4 = [tensor2d([0, 0, 0, 1, 1, 1], [2, 3], 'int32')];\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArrayScatterV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.inputParams['tensor'] = createTensorAttr(2);\n        node.inputNames = ['input2', 'input3', 'input4'];\n        const input2 = [tensorArray.idTensor];\n        const input3 = [tensor1d([0, 1], 'int32')];\n        await executeOp(node, {input2, input3, input4}, context);\n\n        expect(tensorArray.size()).toEqual(2);\n      });\n\n      it('should match json def', () => {\n        node.op = 'TensorArrayScatterV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.inputParams['tensor'] = createTensorAttr(2);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArraySplitV3', () => {\n      it('should split the tensor to tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 2, [3], true, false, true);\n        const input4 = [tensor2d([0, 0, 0, 1, 1, 1], [2, 3], 'int32')];\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArraySplitV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['tensor'] = createTensorAttr(1);\n        node.inputParams['lengths'] = createNumericArrayAttrFromIndex(2);\n        node.inputNames = ['input2', 'input4', 'input3'];\n        const input2 = [tensorArray.idTensor];\n        const input3 = [tensor1d([1, 1], 'int32')];\n        await executeOp(node, {input2, input3, input4}, context);\n\n        expect(tensorArray.size()).toEqual(2);\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArraySplitV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputParams['tensor'] = createTensorAttr(1);\n        node.inputParams['lengths'] = createNumericArrayAttrFromIndex(2);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayConcatV3', () => {\n      it('should concat the tensors from tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [3], true, false, true);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        const input5 = tensor1d([1, 1, 1], 'int32');\n        tensorArray.writeMany([0, 1], [input4, input5]);\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArrayConcatV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.attrParams['dtype'] = createDtypeAttr('int32');\n        node.inputNames = ['input2'];\n        const input2 = [tensorArray.idTensor];\n        const concat = await executeOp(node, {input2}, context);\n        expect(concat.length).toEqual(1);\n        expect(concat[0].shape).toEqual([6]);\n        test_util.expectArraysClose(\n            concat[0].dataSync(), new Int32Array([0, 0, 0, 1, 1, 1]));\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArrayConcatV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.attrParams['dtype'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArraySizeV3', () => {\n      it('should get the size of tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [3], true, false, true);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        const input5 = tensor1d([1, 1, 1], 'int32');\n        tensorArray.writeMany([0, 1], [input4, input5]);\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArraySizeV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputNames = ['input2'];\n        const input2 = [tensorArray.idTensor];\n        const size = await executeOp(node, {input2}, context);\n        expect(size.length).toEqual(1);\n        expect(size[0].shape).toEqual([]);\n        test_util.expectArraysClose(size[0].dataSync(), new Int32Array([2]));\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArraySizeV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorArrayCloseV3', () => {\n      it('should close the tensorArray', async () => {\n        const tensorArray =\n            new TensorArray('', 'int32', 5, [3], true, false, true);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        const input5 = tensor1d([1, 1, 1], 'int32');\n        tensorArray.writeMany([0, 1], [input4, input5]);\n        context.addTensorArray(tensorArray);\n        node.op = 'TensorArrayCloseV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n        node.inputNames = ['input2'];\n        const input2 = [tensorArray.idTensor];\n        await executeOp(node, {input2}, context);\n        expect(tensorArray.closed).toBeTruthy();\n      });\n      it('should match json def', () => {\n        node.op = 'TensorArrayCloseV3';\n        node.inputParams['tensorArrayId'] = createTensorAttr(0);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n  });\n  describe('StatelessWhile', () => {\n    it('should set the output', async () => {\n      node.op = 'StatelessWhile';\n      node.inputNames = ['input1', 'input2'];\n      node.inputParams['args'] = createTensorsAttr(0, 0);\n      node.attrParams['cond'] = {'value': 'condFunc', 'type': 'func'};\n      node.attrParams['body'] = {'value': 'bodyFunc', 'type': 'func'};\n\n      const cond = [tfOps.scalar(false)];\n      const graph: Graph = {\n        inputs: [],\n        nodes: {\n\n        },\n        outputs: [],\n        weights: [],\n        placeholders: [],\n        functions: {},\n        signature: {}\n      };\n      const condExecutor = new GraphExecutor(graph);\n      let firstTime = true;\n      spyOn(condExecutor, 'executeFunctionAsync').and.callFake(() => {\n        if (firstTime) {\n          firstTime = false;\n          return input1;\n        }\n        return input2;\n      });\n      const bodyExecutor = new GraphExecutor(graph);\n      const input3 = [tfOps.scalar(3, 'int32')];\n      spyOn(bodyExecutor, 'executeFunctionAsync').and.returnValue(input3);\n      context.functionMap['bodyFunc'] = bodyExecutor;\n      context.functionMap['condFunc'] = condExecutor;\n      const result = await executeOp(node, {cond, input1, input2}, context);\n\n      test_util.expectArraysEqual(\n          await result[0].array(), await input3[0].array());\n    });\n\n    it('should match json def', () => {\n      node.op = 'StatelessWhile';\n      node.inputNames = ['input1', 'input2'];\n      node.inputParams['args'] = createTensorsAttr(0, 0);\n      node.attrParams['cond'] = {'value': 'condFunc', 'type': 'func'};\n      node.attrParams['body'] = {'value': 'bodyFunc', 'type': 'func'};\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n  });\n  describe('While', () => {\n    it('should set the output', async () => {\n      node.op = 'While';\n      node.inputNames = ['input1', 'input2'];\n      node.inputParams['args'] = createTensorsAttr(0, 0);\n      node.attrParams['cond'] = {'value': 'condFunc', 'type': 'func'};\n      node.attrParams['body'] = {'value': 'bodyFunc', 'type': 'func'};\n\n      const cond = [tfOps.scalar(false)];\n      const graph: Graph = {\n        inputs: [],\n        nodes: {\n\n        },\n        outputs: [],\n        weights: [],\n        placeholders: [],\n        functions: {},\n        signature: {}\n      };\n      const condExecutor = new GraphExecutor(graph);\n      let firstTime = true;\n      spyOn(condExecutor, 'executeFunctionAsync').and.callFake(() => {\n        if (firstTime) {\n          firstTime = false;\n          return input1;\n        }\n        return input2;\n      });\n      const bodyExecutor = new GraphExecutor(graph);\n      const input3 = [tfOps.scalar(3, 'int32')];\n      spyOn(bodyExecutor, 'executeFunctionAsync').and.returnValue(input3);\n      context.functionMap['bodyFunc'] = bodyExecutor;\n      context.functionMap['condFunc'] = condExecutor;\n      const result = await executeOp(node, {cond, input1, input2}, context);\n\n      test_util.expectArraysEqual(\n          await result[0].array(), await input3[0].array());\n    });\n\n    it('should match json def', () => {\n      node.op = 'While';\n      node.inputNames = ['input1', 'input2'];\n      node.inputParams['args'] = createTensorsAttr(0, 0);\n      node.attrParams['cond'] = {'value': 'condFunc', 'type': 'func'};\n      node.attrParams['body'] = {'value': 'bodyFunc', 'type': 'func'};\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n  });\n  describe('StatelessIf', () => {\n    it('should set the output condition is true', async () => {\n      node.op = 'StatelessIf';\n      node.inputNames = ['cond', 'input1', 'input2'];\n      node.inputParams['args'] = createTensorsAttr(1, 0);\n      node.inputParams['cond'] = createTensorAttr(0);\n      node.attrParams['thenBranch'] = {'value': 'thenFunc', 'type': 'func'};\n      node.attrParams['elseBranch'] = {'value': 'elseFunc', 'type': 'func'};\n\n      const cond = [tfOps.scalar(true)];\n      const graph: Graph = {\n        inputs: [],\n        nodes: {\n\n        },\n        outputs: [],\n        weights: [],\n        placeholders: [],\n        functions: {},\n        signature: {}\n      };\n      const thenExecutor = new GraphExecutor(graph);\n      spyOn(thenExecutor, 'executeFunctionAsync').and.returnValue(input1);\n      const elseExecutor = new GraphExecutor(graph);\n      spyOn(elseExecutor, 'executeFunctionAsync').and.returnValue(input2);\n      context.functionMap['thenFunc'] = thenExecutor;\n      context.functionMap['elseFunc'] = elseExecutor;\n      const result = await executeOp(node, {cond, input1, input2}, context);\n\n      test_util.expectArraysEqual(\n          await result[0].array(), await input1[0].array());\n    });\n    it('should set the output condition is false', async () => {\n      node.op = 'StatelessIf';\n      node.inputNames = ['cond', 'input1'];\n      node.inputParams['args'] = createTensorsAttr(1, 0);\n      node.inputParams['cond'] = createTensorAttr(0);\n      node.attrParams['thenBranch'] = {'value': 'thenFunc', 'type': 'func'};\n      node.attrParams['elseBranch'] = {'value': 'elseFunc', 'type': 'func'};\n\n      const cond = [tfOps.scalar(false)];\n      const graph: Graph = {\n        inputs: [],\n        nodes: {\n\n        },\n        outputs: [],\n        weights: [],\n        placeholders: [],\n        functions: {},\n        signature: {}\n      };\n      const thenExecutor = new GraphExecutor(graph);\n      spyOn(thenExecutor, 'executeFunctionAsync').and.returnValue(input1);\n      const elseExecutor = new GraphExecutor(graph);\n      spyOn(elseExecutor, 'executeFunctionAsync').and.returnValue(input2);\n      context.functionMap['thenFunc'] = thenExecutor;\n      context.functionMap['elseFunc'] = elseExecutor;\n      const result = await executeOp(node, {cond, input1, input2}, context);\n\n      test_util.expectArraysEqual(\n          await result[0].array(), await input2[0].array());\n    });\n    it('should match json def', () => {\n      node.op = 'StatelessIf';\n      node.inputNames = ['cond', 'input1'];\n      node.inputParams['args'] = createTensorsAttr(1, 0);\n      node.inputParams['cond'] = createTensorAttr(0);\n      node.attrParams['thenBranch'] = {'value': 'thenFunc', 'type': 'func'};\n      node.attrParams['elseBranch'] = {'value': 'elseFunc', 'type': 'func'};\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n  });\n  describe('If', () => {\n    it('should set the output condition is true', async () => {\n      node.op = 'If';\n      node.inputNames = ['cond', 'input1', 'input2'];\n      node.inputParams['args'] = createTensorsAttr(1, 0);\n      node.inputParams['cond'] = createTensorAttr(0);\n      node.attrParams['thenBranch'] = {'value': 'thenFunc', 'type': 'func'};\n      node.attrParams['elseBranch'] = {'value': 'elseFunc', 'type': 'func'};\n\n      const cond = [tfOps.scalar(true)];\n      const graph: Graph = {\n        inputs: [],\n        nodes: {\n\n        },\n        outputs: [],\n        weights: [],\n        placeholders: [],\n        functions: {},\n        signature: {}\n      };\n      const thenExecutor = new GraphExecutor(graph);\n      spyOn(thenExecutor, 'executeFunctionAsync').and.returnValue(input1);\n      const elseExecutor = new GraphExecutor(graph);\n      spyOn(elseExecutor, 'executeFunctionAsync').and.returnValue(input2);\n      context.functionMap['thenFunc'] = thenExecutor;\n      context.functionMap['elseFunc'] = elseExecutor;\n      const result = await executeOp(node, {cond, input1, input2}, context);\n\n      test_util.expectArraysEqual(\n          await result[0].array(), await input1[0].array());\n    });\n    it('should set the output condition is false', async () => {\n      node.op = 'If';\n      node.inputNames = ['cond', 'input1'];\n      node.inputParams['args'] = createTensorsAttr(1, 0);\n      node.inputParams['cond'] = createTensorAttr(0);\n      node.attrParams['thenBranch'] = {'value': 'thenFunc', 'type': 'func'};\n      node.attrParams['elseBranch'] = {'value': 'elseFunc', 'type': 'func'};\n\n      const cond = [tfOps.scalar(false)];\n      const graph: Graph = {\n        inputs: [],\n        nodes: {\n\n        },\n        outputs: [],\n        weights: [],\n        placeholders: [],\n        functions: {},\n        signature: {}\n      };\n      const thenExecutor = new GraphExecutor(graph);\n      spyOn(thenExecutor, 'executeFunctionAsync').and.returnValue(input1);\n      const elseExecutor = new GraphExecutor(graph);\n      spyOn(elseExecutor, 'executeFunctionAsync').and.returnValue(input2);\n      context.functionMap['thenFunc'] = thenExecutor;\n      context.functionMap['elseFunc'] = elseExecutor;\n      const result = await executeOp(node, {cond, input1, input2}, context);\n\n      test_util.expectArraysEqual(\n          await result[0].array(), await input2[0].array());\n    });\n    it('should match json def', () => {\n      node.op = 'If';\n      node.inputNames = ['cond', 'input1'];\n      node.inputParams['args'] = createTensorsAttr(1, 0);\n      node.inputParams['cond'] = createTensorAttr(0);\n      node.attrParams['thenBranch'] = {'value': 'thenFunc', 'type': 'func'};\n      node.attrParams['elseBranch'] = {'value': 'elseFunc', 'type': 'func'};\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n  });\n  describe('TensorListReserve', () => {\n    it('should create new tensor on the context', async () => {\n      node.op = 'TensorListReserve';\n      node.inputParams['elementShape'] = createNumericArrayAttrFromIndex(0);\n      node.inputParams['numElements'] = createNumberAttrFromIndex(1);\n      node.attrParams['elementDType'] = createDtypeAttr('int32');\n      node.inputNames = ['input4', 'input1'];\n      const input4 = [tensor1d([10, 10], 'int32')];\n      const tensorListId =\n          (await executeOp(node, {input1, input4}, context))[0];\n      const tensorList = context.getTensorList(tensorListId.id);\n      expect(tensorList.elementDtype).toEqual('int32');\n      expect(tensorList.elementShape).toEqual([10, 10]);\n      expect(tensorList.maxNumElements).toEqual(1);\n    });\n    it('should match json def', () => {\n      node.op = 'TensorListReserve';\n      node.inputParams['elementShape'] = createShapeAttrFromIndex(0);\n      node.inputParams['numElements'] = createNumberAttrFromIndex(1);\n      node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n  });\n\n  describe('EmptyTensorList', () => {\n    it('should create new tensor on the context', async () => {\n      node.op = 'EmptyTensorList';\n      node.inputParams['elementShape'] = createNumericArrayAttrFromIndex(0);\n      node.inputParams['maxNumElements'] = createNumberAttrFromIndex(1);\n      node.attrParams['elementDType'] = createDtypeAttr('int32');\n      node.inputNames = ['input4', 'input1'];\n      const input4 = [tensor1d([10, 10], 'int32')];\n      const tensorListId =\n          (await executeOp(node, {input1, input4}, context))[0];\n      const tensorList = context.getTensorList(tensorListId.id);\n      expect(tensorList.elementDtype).toEqual('int32');\n      expect(tensorList.elementShape).toEqual([10, 10]);\n      expect(tensorList.maxNumElements).toEqual(1);\n    });\n    it('should match json def', () => {\n      node.op = 'EmptyTensorList';\n      node.inputParams['elementShape'] = createShapeAttrFromIndex(0);\n      node.inputParams['maxNumElements'] = createNumberAttrFromIndex(1);\n      node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n  });\n\n  describe('TensorListConcat', () => {\n    it('should concat the tensors from tensorList', async () => {\n      const input4 = tensor1d([0, 0, 0], 'int32');\n      const input5 = tensor1d([1, 1, 1], 'int32');\n      const tensorList = new TensorList([input4, input5], [3], 'int32', 5);\n      context.addTensorList(tensorList);\n      node.op = 'TensorListConcat';\n      node.inputParams['tensorListId'] = createTensorAttr(0);\n      node.attrParams['elementDType'] = createDtypeAttr('int32');\n      node.attrParams['elementShape'] = createTensorShapeAttr([3]);\n      node.inputNames = ['input2'];\n      const input2 = [tensorList.idTensor];\n      const concat = await executeOp(node, {input2}, context);\n      expect(concat.length).toEqual(1);\n      expect(concat[0].shape).toEqual([6]);\n      test_util.expectArraysClose(\n          concat[0].dataSync(), new Int32Array([0, 0, 0, 1, 1, 1]));\n    });\n    it('should match json def', () => {\n      node.op = 'TensorListConcat';\n      node.inputParams['tensorListId'] = createTensorAttr(0);\n      node.attrParams['elementDType'] = createDtypeAttr('int32');\n      node.attrParams['elementShape'] = createTensorShapeAttr([3]);\n\n      expect(validateParam(node, control.json)).toBeTruthy();\n    });\n\n    describe('TensorListScatter', () => {\n      it('should scatter the tensor to tensorList', async () => {\n        const input4 = [tensor2d([0, 0, 0, 1, 1, 1], [2, 3], 'int32')];\n        node.op = 'TensorListScatter';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n        node.inputNames = ['input4', 'input2', 'input3'];\n        const input2 = [tensor1d([0, 1], 'int32')];\n        const input3 = [tensor1d([3], 'int32')];\n        const tensorListId =\n            (await executeOp(node, {input2, input3, input4}, context))[0];\n        const tensorList = context.getTensorList(tensorListId.id);\n        expect(tensorList.size()).toEqual(2);\n      });\n\n      it('should match json def', () => {\n        node.op = 'TensorListScatter';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorListScatterV2', () => {\n      it('should scatter the tensor to tensorList', async () => {\n        const input4 = [tensor2d([0, 0, 0, 1, 1, 1], [2, 3], 'int32')];\n        node.op = 'TensorListScatterV2';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n        node.inputParams['numElements'] = createNumberAttrFromIndex(3);\n        node.inputNames = ['input4', 'input2', 'input3', 'input5'];\n        const input2 = [tensor1d([0, 1], 'int32')];\n        const input3 = [tensor1d([3], 'int32')];\n        const input5 = [tensor1d([2], 'int32')];\n        const tensorListId = (await executeOp(\n            node, {input2, input3, input4, input5}, context))[0];\n        const tensorList = context.getTensorList(tensorListId.id);\n        expect(tensorList.size()).toEqual(2);\n      });\n\n      it('should match json def', () => {\n        node.op = 'TensorListScatterV2';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n        node.inputParams['numElements'] = createNumberAttrFromIndex(3);\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n    describe('TensorListSetItem', () => {\n      it('should write the tensor to tensorArray', async () => {\n        const tensorList = new TensorList([], [], 'int32', 5);\n        context.addTensorList(tensorList);\n        node.op = 'TensorListSetItem';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputParams['tensor'] = createTensorAttr(2);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n        node.inputNames = ['input2', 'input3', 'input1'];\n        const input2 = [tensorList.idTensor];\n        const input3 = [scalar(0)];\n        await executeOp(node, {input1, input2, input3}, context);\n\n        expect(tensorList.size()).toEqual(1);\n      });\n      it('should match json def', () => {\n        node.op = 'TensorListSetItem';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputParams['tensor'] = createTensorAttr(2);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorListGetItem', () => {\n      it('should read the tensor from tensorList', async () => {\n        const tensorList = new TensorList([], [3], 'int32', 5);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        tensorList.setItem(0, input4);\n        context.addTensorList(tensorList);\n        node.op = 'TensorListGetItem';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n        node.inputNames = ['input2', 'input3', 'input5'];\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n        const input2 = [tensorList.idTensor];\n        const input3 = [scalar(0)];\n        const input5 = [tensor1d([3], 'int32')];\n        const read = await executeOp(node, {input5, input2, input3}, context);\n\n        test_util.expectArraysClose(\n            await read[0].array(), await input4.array());\n      });\n      it('should match json def', () => {\n        node.op = 'TensorListGetItem';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['index'] = createNumberAttrFromIndex(1);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n    describe('TensorListPushBack', () => {\n      it('should write the tensor to tensorArray', async () => {\n        const tensorList = new TensorList([], [], 'int32', 5);\n        context.addTensorList(tensorList);\n        node.op = 'TensorListPushBack';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['tensor'] = createTensorAttr(1);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n        node.inputNames = ['input2', 'input1'];\n        const input2 = [tensorList.idTensor];\n        await executeOp(node, {input1, input2}, context);\n\n        expect(tensorList.size()).toEqual(1);\n      });\n      it('should match json def', () => {\n        node.op = 'TensorListPushBack';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['tensor'] = createTensorAttr(1);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n\n    describe('TensorListPopBack', () => {\n      it('should read the tensor from tensorList', async () => {\n        const tensorList = new TensorList([], [3], 'int32', 5);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        tensorList.setItem(0, input4);\n        context.addTensorList(tensorList);\n        node.op = 'TensorListPopBack';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(1);\n        node.inputNames = ['input2', 'input5'];\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n        const input2 = [tensorList.idTensor];\n        const input5 = [tensor1d([3], 'int32')];\n        const read = await executeOp(node, {input5, input2}, context);\n\n        test_util.expectArraysClose(\n            await read[0].array(), await input4.array());\n      });\n      it('should match json def', () => {\n        node.op = 'TensorListPopBack';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(1);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n    describe('TensorListStack', () => {\n      it('should read the tensor from tensorList', async () => {\n        const tensorList = new TensorList([], [3], 'int32', 5);\n        const input4 = tensor1d([0, 0, 0], 'int32');\n        tensorList.setItem(0, input4);\n        context.addTensorList(tensorList);\n        node.op = 'TensorListStack';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(1);\n        node.inputNames = ['input2', 'input5'];\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n        const input2 = [tensorList.idTensor];\n        const input5 = [tensor1d([3], 'int32')];\n        const read = await executeOp(node, {input5, input2}, context);\n\n        test_util.expectArraysClose(\n            await read[0].array(), [await input4.array()]);\n      });\n      it('should match json def', () => {\n        node.op = 'TensorListStack';\n        node.inputParams['tensorListId'] = createTensorAttr(0);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(1);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n      describe('TensorListGather', () => {\n        it('should read the tensor from tensorList', async () => {\n          const tensorList = new TensorList([], [3], 'int32', 5);\n          const input4 = tensor1d([0, 0, 0], 'int32');\n          tensorList.setItem(0, input4);\n          const input6 = tensor1d([1, 1, 1], 'int32');\n          tensorList.setItem(1, input6);\n          context.addTensorList(tensorList);\n          node.op = 'TensorListGather';\n          node.inputParams['tensorListId'] = createTensorAttr(0);\n          node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n          node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n          node.inputNames = ['input2', 'input3', 'input5'];\n          node.attrParams['elementDType'] = createDtypeAttr('int32');\n          const input2 = [tensorList.idTensor];\n          const input3 = [tensor1d([0, 1], 'int32')];\n\n          const input5 = [tensor1d([3], 'int32')];\n          const read = await executeOp(node, {input5, input2, input3}, context);\n\n          test_util.expectArraysClose(\n              await read[0].array(),\n              [await input4.array(), await input6.array()]);\n        });\n        it('should match json def', () => {\n          node.op = 'TensorListGather';\n          node.inputParams['tensorListId'] = createTensorAttr(0);\n          node.inputParams['indices'] = createNumericArrayAttrFromIndex(1);\n          node.inputParams['elementShape'] = createShapeAttrFromIndex(2);\n          node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n          expect(validateParam(node, control.json)).toBeTruthy();\n        });\n      });\n    });\n    describe('TensorListSplit', () => {\n      it('should scatter the tensor to tensorList', async () => {\n        const input4 = [tensor2d([0, 0, 0, 1, 1, 1], [2, 3], 'int32')];\n        node.op = 'TensorListSplit';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(1);\n        node.inputParams['lengths'] = createNumericArrayAttrFromIndex(2);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        node.inputNames = ['input4', 'input2', 'input3'];\n        const input2 = [tensor1d([3], 'int32')];\n        const input3 = [tensor1d([1, 1], 'int32')];\n        const idTensor =\n            (await executeOp(node, {input2, input3, input4}, context))[0];\n        const tensorList = context.getTensorList(idTensor.id);\n        expect(tensorList.size()).toEqual(2);\n      });\n\n      it('should match json def', () => {\n        node.op = 'TensorListSplit';\n        node.inputParams['tensor'] = createTensorAttr(0);\n        node.inputParams['elementShape'] = createShapeAttrFromIndex(1);\n        node.inputParams['lengths'] = createNumericArrayAttrFromIndex(2);\n        node.attrParams['elementDType'] = createDtypeAttr('int32');\n\n        expect(validateParam(node, control.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}