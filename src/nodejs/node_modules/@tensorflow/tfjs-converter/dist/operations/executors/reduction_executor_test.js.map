{"version":3,"file":"reduction_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/reduction_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as reduction from '../op_list/reduction';\nimport {Node} from '../types';\n\nimport {executeOp} from './reduction_executor';\nimport {createBoolAttr, createNumberAttr, createNumberAttrFromIndex, createTensorAttr, validateParam} from './test_helper';\n\ndescribe('reduction', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'reduction',\n      inputNames: ['input1'],\n      inputs: [],\n      inputParams: {x: createTensorAttr(0)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    ['Max', 'Mean', 'Min', 'Sum', 'All', 'Any', 'Prod'].forEach(op => {\n      it('should call tfOps.' + op, () => {\n        const spy =\n            spyOn(tfOps, op.charAt(0).toLowerCase() + op.slice(1) as 'max');\n        node.op = op;\n        node.attrParams.keepDims = createBoolAttr(true);\n        node.attrParams.axis = createNumberAttr(1);\n        executeOp(node, {input1}, context);\n\n        expect(spy).toHaveBeenCalledWith(input1[0], 1, true);\n      });\n    });\n    describe('ArgMax', () => {\n      it('should call tfOps.argMax', () => {\n        spyOn(tfOps, 'argMax');\n        node.op = 'ArgMax';\n        node.attrParams.keepDims = createBoolAttr(true);\n        node.attrParams.axis = createNumberAttr(1);\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.argMax).toHaveBeenCalledWith(input1[0], 1);\n      });\n    });\n    describe('ArgMin', () => {\n      it('should call tfOps.argMin', () => {\n        spyOn(tfOps, 'argMin');\n        node.op = 'ArgMin';\n        node.attrParams.keepDims = createBoolAttr(true);\n        node.attrParams.axis = createNumberAttr(1);\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.argMin).toHaveBeenCalledWith(input1[0], 1);\n      });\n    });\n    describe('Cumsum', () => {\n      it('should call tfOps.cumsum', () => {\n        spyOn(tfOps, 'cumsum');\n        node.op = 'Cumsum';\n        node.attrParams.exclusive = createBoolAttr(true);\n        node.attrParams.reverse = createBoolAttr(false);\n        node.inputNames = ['input1', 'input2'];\n        node.inputParams.axis = createNumberAttrFromIndex(1);\n        const input2 = [tfOps.scalar(2)];\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.cumsum).toHaveBeenCalledWith(input1[0], 2, true, false);\n      });\n    });\n    describe('Bincount', () => {\n      it('should call tfOps.bincount', () => {\n        spyOn(tfOps, 'bincount');\n        node.op = 'Bincount';\n        node.inputNames = ['input4', 'input3', 'input2'];\n        node.inputParams.size = createNumberAttrFromIndex(1);\n        node.inputParams.weights = createTensorAttr(2);\n        const input4 = [tfOps.tensor1d([1, 1], 'int32')];\n        const input3 = [tfOps.scalar(2)];\n        const input2 = [tfOps.tensor1d([])];\n        executeOp(node, {input4, input3, input2}, context);\n\n        expect(tfOps.bincount).toHaveBeenCalledWith(input4[0], input2[0], 2);\n      });\n      it('should match json def for bincount.', () => {\n        node.op = 'Bincount';\n        node.inputParams.size = createNumberAttrFromIndex(1);\n        node.inputParams.weights = createTensorAttr(2);\n\n        expect(validateParam(node, reduction.json, 'Bincount')).toBeTruthy();\n      });\n    });\n    describe('DenseBincount', () => {\n      it('should call tfOps.denseBincount', () => {\n        spyOn(tfOps, 'denseBincount');\n        node.op = 'DenseBincount';\n        node.inputNames = ['input4', 'input3', 'input2'];\n        node.inputParams.x = createTensorAttr(0);\n        node.inputParams.size = createNumberAttrFromIndex(1);\n        node.inputParams.weights = createTensorAttr(2);\n        node.attrParams.binaryOutput = createBoolAttr(true);\n        const input4 = [tfOps.tensor1d([1, 1], 'int32')];\n        const input3 = [tfOps.scalar(2)];\n        const input2 = [tfOps.tensor1d([])];\n        executeOp(node, {input4, input3, input2}, context);\n\n        expect(tfOps.denseBincount)\n            .toHaveBeenCalledWith(input4[0], input2[0], 2, true);\n      });\n      it('should match json def for denseBincount.', () => {\n        node.op = 'DenseBincount';\n        node.inputParams.size = createNumberAttrFromIndex(1);\n        node.inputParams.weights = createTensorAttr(2);\n        node.attrParams.binaryOutput = createBoolAttr(true);\n\n        expect(validateParam(node, reduction.json, 'DenseBincount'))\n            .toBeTruthy();\n      });\n    });\n  });\n});\n"]}