{"version":3,"file":"graph_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/graph_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {executeOp} from './graph_executor';\nimport {createNumberAttr, createStrAttr, createTensorAttr, createTensorsAttr} from './test_helper';\n\ndescribe('graph', () => {\n  let node: Node;\n  const input1 = [tfOps.tensor1d([1])];\n  const input2 = [tfOps.tensor1d([1])];\n  const input3 = [tfOps.tensor3d([1, 1, 1, 2, 2, 2], [1, 2, 3])];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'input1',\n      op: '',\n      category: 'graph',\n      inputNames: [],\n      inputs: [],\n      inputParams: {},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('Const', () => {\n      it('should return input', () => {\n        node.op = 'Const';\n        expect(executeOp(node, {input1}, context)).toEqual(input1);\n      });\n    });\n    describe('placeholder', () => {\n      it('should return input', () => {\n        node.op = 'Placeholder';\n        expect(executeOp(node, {input1}, context)).toEqual(input1);\n      });\n      it('should return default if input not set', () => {\n        node.inputNames = ['input2'];\n        node.op = 'PlaceholderWithDefault';\n        node.inputParams.default = createTensorAttr(0);\n        expect(executeOp(node, {input2}, context)).toEqual(input2);\n      });\n    });\n    describe('Identity', () => {\n      it('should return input', async () => {\n        node.inputNames = ['input'];\n        node.inputParams.x = createTensorAttr(0);\n        node.op = 'Identity';\n        test_util.expectArraysEqual(\n            await (executeOp(node, {input: input1}, context) as Tensor[])[0]\n                .array(),\n            await input1[0].array());\n      });\n    });\n    describe('IdentityN', () => {\n      it('should return inputs', () => {\n        node.inputNames = ['input1', 'input3'];\n        node.inputParams.x = createTensorsAttr(0, 0);\n        node.op = 'IdentityN';\n        expect(\n            (executeOp(node, {input1, input3}, context) as Tensor[]).map(t => {\n              return Array.prototype.slice.call(t.dataSync());\n            }))\n            .toEqual([[1], [1, 1, 1, 2, 2, 2]]);\n      });\n    });\n    describe('Snapshot', () => {\n      it('should return input', async () => {\n        node.inputNames = ['input'];\n        node.inputParams.x = createTensorAttr(0);\n        node.op = 'Snapshot';\n        const result =\n            (executeOp(node, {input: input1}, context) as Tensor[])[0];\n        expect(result.rank).toEqual(input1[0].rank);\n        test_util.expectArraysClose(await result.data(), [1]);\n      });\n    });\n    describe('Shape', () => {\n      it('should return shape', () => {\n        node.inputNames = ['input'];\n        node.inputParams.x = createTensorAttr(0);\n        node.op = 'Shape';\n        expect(Array.prototype.slice.call(\n                   (executeOp(node, {input: input3}, context) as Tensor[])[0]\n                       .dataSync()))\n            .toEqual([1, 2, 3]);\n      });\n    });\n    describe('ShapeN', () => {\n      it('should return shapeN', () => {\n        node.inputNames = ['input1', 'input3'];\n        node.inputParams.x = createTensorsAttr(0, 0);\n        node.op = 'ShapeN';\n        expect(\n            (executeOp(node, {input1, input3}, context) as Tensor[]).map(t => {\n              return Array.prototype.slice.call(t.dataSync());\n            }))\n            .toEqual([[1], [1, 2, 3]]);\n      });\n    });\n    describe('Size', () => {\n      it('should return size', () => {\n        node.inputNames = ['input'];\n        node.inputParams.x = createTensorAttr(0);\n        node.op = 'Size';\n        expect(Array.prototype.slice.call(\n                   (executeOp(node, {input: input3}, context) as Tensor[])[0]\n                       .dataSync()))\n            .toEqual([6]);\n      });\n    });\n    describe('Rank', () => {\n      it('should return rank', () => {\n        node.inputNames = ['input'];\n        node.inputParams.x = createTensorAttr(0);\n        node.op = 'Rank';\n        expect(Array.prototype.slice.call(\n                   (executeOp(node, {input: input3}, context) as Tensor[])[0]\n                       .dataSync()))\n            .toEqual([3]);\n      });\n    });\n    describe('NoOp', () => {\n      it('should return empty', async () => {\n        node.op = 'NoOp';\n        test_util.expectArraysClose(\n            await (executeOp(node, {}, context) as Tensor[])[0].data(), [1]);\n      });\n    });\n  });\n  describe('Print', () => {\n    it('should return empty', () => {\n      node.op = 'Print';\n      node.inputNames = ['input1', 'input2'];\n      node.inputParams.x = createTensorAttr(0);\n      node.inputParams.data = createTensorsAttr(1, 2);\n      node.attrParams.message = createStrAttr('message');\n      node.attrParams.summarize = createNumberAttr(1);\n      spyOn(console, 'log').and.callThrough();\n      spyOn(console, 'warn').and.callThrough();\n\n      expect(executeOp(node, {input1, input2}, context)).toEqual(input1);\n      expect(console.warn).toHaveBeenCalled();\n      expect(console.log).toHaveBeenCalledWith('message');\n      expect(console.log).toHaveBeenCalledWith([1]);\n    });\n  });\n  describe('StopGradient', () => {\n    it('should return input', async () => {\n      node.inputNames = ['input'];\n      node.inputParams.x = createTensorAttr(0);\n      node.op = 'StopGradient';\n      test_util.expectArraysClose(\n          await (executeOp(node, {input: input1}, context) as Tensor[])[0]\n              .array(),\n          await input1[0].array());\n    });\n  });\n  describe('FakeQuantWithMinMaxVars', () => {\n    it('should return input', async () => {\n      node.inputNames = ['input'];\n      node.inputParams.x = createTensorAttr(0);\n      node.op = 'FakeQuantWithMinMaxVars';\n      test_util.expectArraysClose(\n          await (executeOp(node, {input: input1}, context) as Tensor[])[0]\n              .array(),\n          await input1[0].array());\n    });\n  });\n});\n"]}