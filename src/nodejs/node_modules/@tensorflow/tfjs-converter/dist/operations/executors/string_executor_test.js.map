{"version":3,"file":"string_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/string_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as string from '../op_list/string';\nimport {Node} from '../types';\n\nimport {executeOp} from './string_executor';\nimport {createBoolAttr, createNumberAttr, createNumericArrayAttr, createStrAttr, createTensorAttr, validateParam} from './test_helper';\n\ndescribe('string', () => {\n  let node: Node;\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'string',\n      inputNames: [],\n      inputs: [],\n      inputParams: {},\n      attrParams: {},\n      children: [],\n      outputs: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('StringNGrams', () => {\n      it('should call tfOps.string.stringNGrams', async () => {\n        spyOn(tfOps.string, 'stringNGrams').and.callThrough();\n        node.op = 'StringNGrams';\n        node.inputParams = {\n          data: createTensorAttr(0),\n          dataSplits: createTensorAttr(1)\n        };\n        node.attrParams = {\n          separator: createStrAttr('|'),\n          nGramWidths: createNumericArrayAttr([3]),\n          leftPad: createStrAttr('LP'),\n          rightPad: createStrAttr('RP'),\n          padWidth: createNumberAttr(-1),\n          preserveShortSequences: createBoolAttr(false)\n        };\n        node.inputNames = ['data', 'dataSplits'];\n        node.outputs = ['ngrams', 'ngrams_splits'];\n\n        const data = [tfOps.tensor1d(['a', 'b', 'c', 'd', 'e', 'f'], 'string')];\n        const dataSplits = [tfOps.tensor1d([0, 4, 6], 'int32')];\n        const result = executeOp(node, {data, dataSplits}, context) as Tensor[];\n\n        expect(tfOps.string.stringNGrams)\n            .toHaveBeenCalledWith(\n                data[0], dataSplits[0], '|', [3], 'LP', 'RP', -1, false);\n        test_util.expectArraysEqual(await result[0].data(), [\n          'LP|LP|a', 'LP|a|b', 'a|b|c', 'b|c|d', 'c|d|RP', 'd|RP|RP',  // 0\n          'LP|LP|e', 'LP|e|f', 'e|f|RP', 'f|RP|RP'                     // 1\n        ]);\n        test_util.expectArraysEqual(await result[1].data(), [0, 6, 10]);\n      });\n      it('should match json def', () => {\n        node.op = 'StringNGrams';\n        node.inputParams = {\n          data: createTensorAttr(0),\n          dataSplits: createTensorAttr(1)\n        };\n        node.outputs = ['ngrams', 'ngrams_splits'];\n        expect(validateParam(node, string.json)).toBeTruthy();\n      });\n    });\n    describe('StringSplit', () => {\n      it('should call tfOps.string.stringSplit', async () => {\n        spyOn(tfOps.string, 'stringSplit').and.callThrough();\n        node.op = 'StringSplit';\n        node.inputParams = {\n          input: createTensorAttr(0),\n          delimiter: createTensorAttr(1)\n        };\n        node.attrParams = {skipEmpty: createBoolAttr(false)};\n        node.inputNames = ['input', 'delimiter'];\n        node.outputs = ['indices', 'values', 'shape'];\n\n        const input = [tfOps.tensor1d(['#a', 'b#', '#c#'], 'string')];\n        const delimiter = [tfOps.scalar('#', 'string')];\n        const result = executeOp(node, {input, delimiter}, context) as Tensor[];\n\n        expect(tfOps.string.stringSplit)\n            .toHaveBeenCalledWith(input[0], delimiter[0], false);\n        test_util.expectArraysEqual(\n            await result[0].data(), [0, 0, 0, 1, 1, 0, 1, 1, 2, 0, 2, 1, 2, 2]);\n        test_util.expectArraysEqual(\n            await result[1].data(), ['', 'a', 'b', '', '', 'c', '']);\n        test_util.expectArraysEqual(await result[2].data(), [3, 3]);\n      });\n      it('should match json def', () => {\n        node.op = 'StringSplit';\n        node.inputParams = {\n          input: createTensorAttr(0),\n          delimiter: createTensorAttr(1)\n        };\n        node.outputs = ['indices', 'values', 'shape'];\n\n        expect(validateParam(node, string.json)).toBeTruthy();\n      });\n    });\n    describe('StringToHashBucketFast', () => {\n      it('should call tfOps.string.stringToHashBucketFast', async () => {\n        spyOn(tfOps.string, 'stringToHashBucketFast').and.callThrough();\n        node.op = 'StringToHashBucketFast';\n        node.inputParams = {input: createTensorAttr(0)};\n        node.attrParams = {numBuckets: createNumberAttr(10)};\n        node.inputNames = ['input'];\n\n        const input = [tfOps.tensor1d(['a', 'b', 'c', 'd'], 'string')];\n        const result = executeOp(node, {input}, context) as Tensor[];\n\n        expect(tfOps.string.stringToHashBucketFast)\n            .toHaveBeenCalledWith(input[0], 10);\n        test_util.expectArraysClose(await result[0].data(), [9, 2, 2, 5]);\n      });\n      it('should match json def', () => {\n        node.op = 'StringToHashBucketFast';\n        node.inputParams = {input: createTensorAttr(0)};\n\n        expect(validateParam(node, string.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}