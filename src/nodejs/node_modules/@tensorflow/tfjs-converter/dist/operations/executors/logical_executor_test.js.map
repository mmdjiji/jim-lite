{"version":3,"file":"logical_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/logical_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {executeOp} from './logical_executor';\nimport {createTensorAttr} from './test_helper';\n\ndescribe('logical', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const input2 = [tfOps.scalar(2)];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'logical',\n      inputNames: ['input1', 'input2'],\n      inputs: [],\n      inputParams: {a: createTensorAttr(0), b: createTensorAttr(1)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    ['Equal', 'NotEqual', 'Greater', 'GreaterEqual', 'Less', 'LessEqual',\n     'LogicalAnd', 'LogicalOr']\n        .forEach(op => {\n          it('should call tfOps.' + op, () => {\n            const spy = spyOn(\n                tfOps, op.charAt(0).toLowerCase() + op.slice(1) as 'equal');\n            node.op = op;\n            executeOp(node, {input1, input2}, context);\n\n            expect(spy).toHaveBeenCalledWith(input1[0], input2[0]);\n          });\n        });\n    describe('LogicalNot', () => {\n      it('should call tfOps.logicalNot', () => {\n        spyOn(tfOps, 'logicalNot');\n        node.op = 'LogicalNot';\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.logicalNot).toHaveBeenCalledWith(input1[0]);\n      });\n    });\n\n    describe('Select', () => {\n      it('should call tfOps.where', () => {\n        spyOn(tfOps, 'where');\n        node.op = 'Select';\n        node.inputNames = ['input1', 'input2', 'input3'];\n        node.inputParams.condition = createTensorAttr(2);\n        const input3 = [tfOps.scalar(1)];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.where)\n            .toHaveBeenCalledWith(input3[0], input1[0], input2[0]);\n      });\n    });\n\n    describe('SelectV2', () => {\n      it('should call tfOps.where', () => {\n        spyOn(tfOps, 'where');\n        node.op = 'SelectV2';\n        node.inputNames = ['input1', 'input2', 'input3'];\n        node.inputParams.condition = createTensorAttr(2);\n        const input3 = [tfOps.scalar(1)];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.where)\n            .toHaveBeenCalledWith(input3[0], input1[0], input2[0]);\n      });\n    });\n  });\n});\n"]}