{"version":3,"file":"matrices_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/matrices_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\n\nimport {executeOp} from './matrices_executor';\nimport {createBoolAttr, createNumberAttr, createNumericArrayAttr, createStrArrayAttr, createStrAttr, createTensorAttr, createTensorsAttr} from './test_helper';\n\ndescribe('matrices', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const input2 = [tfOps.scalar(2)];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'matrices',\n      inputNames: ['input1', 'input2'],\n      inputs: [],\n      inputParams: {a: createTensorAttr(0), b: createTensorAttr(1)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('MatMul', () => {\n      it('should call tfOps.matMul', () => {\n        spyOn(tfOps, 'matMul');\n        node.op = 'MatMul';\n        node.attrParams.transposeA = createBoolAttr(true);\n        node.attrParams.transposeB = createBoolAttr(false);\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.matMul)\n            .toHaveBeenCalledWith(input1[0], input2[0], true, false);\n      });\n    });\n    describe('_FusedMatMul', () => {\n      it('should call tfOps.fused.matMul', () => {\n        spyOn(tfOps.fused, 'matMul');\n        node.op = '_FusedMatMul';\n        node.inputParams['args'] = createTensorsAttr(2, 0);\n        node.attrParams['fusedOps'] = createStrArrayAttr(['biasadd', 'relu']);\n        node.attrParams['numArgs'] = createNumberAttr(1);\n        node.attrParams.transposeA = createBoolAttr(true);\n        node.attrParams.transposeB = createBoolAttr(false);\n        const input3 = [tfOps.scalar(3.0)];\n        node.inputNames = ['input1', 'input2', 'input3'];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.fused.matMul).toHaveBeenCalledWith({\n          a: input1[0],\n          b: input2[0],\n          transposeA: true,\n          transposeB: false,\n          bias: input3[0],\n          activation: 'relu',\n          preluActivationWeights: undefined,\n          leakyreluAlpha: undefined\n        });\n      });\n      it('should call tfOps.fused.matMul - prelu activation', () => {\n        spyOn(tfOps.fused, 'matMul');\n        node.op = '_FusedMatMul';\n        node.inputParams['args'] = createTensorsAttr(2, 0);\n        node.attrParams['fusedOps'] = createStrArrayAttr(['biasadd', 'prelu']);\n        node.attrParams['numArgs'] = createNumberAttr(2);\n        node.attrParams.transposeA = createBoolAttr(true);\n        node.attrParams.transposeB = createBoolAttr(false);\n        const input3 = [tfOps.scalar(3.0)];\n        const input4 = [tfOps.scalar(4.0)];\n        node.inputNames = ['input1', 'input2', 'input3', 'input4'];\n        executeOp(node, {input1, input2, input3, input4}, context);\n\n        expect(tfOps.fused.matMul).toHaveBeenCalledWith({\n          a: input1[0],\n          b: input2[0],\n          transposeA: true,\n          transposeB: false,\n          bias: input3[0],\n          activation: 'prelu',\n          preluActivationWeights: input4[0],\n          leakyreluAlpha: undefined\n        });\n      });\n      it('should call tfOps.fused.matMul - leakyrelu activation', () => {\n        spyOn(tfOps.fused, 'matMul');\n        node.op = '_FusedMatMul';\n        node.inputParams['args'] = createTensorsAttr(2, 0);\n        node.attrParams['fusedOps'] =\n            createStrArrayAttr(['biasadd', 'leakyrelu']);\n        node.attrParams['numArgs'] = createNumberAttr(1);\n        node.attrParams.transposeA = createBoolAttr(true);\n        node.attrParams.transposeB = createBoolAttr(false);\n        node.attrParams.leakyreluAlpha = createNumberAttr(0.3);\n        const input3 = [tfOps.scalar(3.0)];\n        node.inputNames = ['input1', 'input2', 'input3'];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.fused.matMul).toHaveBeenCalledWith({\n          a: input1[0],\n          b: input2[0],\n          transposeA: true,\n          transposeB: false,\n          bias: input3[0],\n          activation: 'leakyrelu',\n          preluActivationWeights: undefined,\n          leakyreluAlpha: 0.3\n        });\n      });\n    });\n    describe('BatchMatMul', () => {\n      it('should call tfOps.matMul', () => {\n        spyOn(tfOps, 'matMul');\n        node.op = 'BatchMatMul';\n        node.attrParams.transposeA = createBoolAttr(true);\n        node.attrParams.transposeB = createBoolAttr(false);\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.matMul)\n            .toHaveBeenCalledWith(input1[0], input2[0], true, false);\n      });\n    });\n    describe('BatchMatMulV2', () => {\n      it('should call tfOps.matMul', () => {\n        spyOn(tfOps, 'matMul');\n        node.op = 'BatchMatMulV2';\n        node.attrParams.transposeA = createBoolAttr(true);\n        node.attrParams.transposeB = createBoolAttr(false);\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.matMul)\n            .toHaveBeenCalledWith(input1[0], input2[0], true, false);\n      });\n    });\n    describe('Einsum', () => {\n      it('should call tfOps.einsum', () => {\n        const spy = spyOn(tfOps, 'einsum').and.callThrough();\n        node.op = 'Einsum';\n        node.inputParams = {tensors: createTensorsAttr(0, 0)};\n        node.inputNames = ['input1', 'input2'];\n        node.attrParams.equation = createStrAttr(',->');\n        executeOp(node, {input1, input2}, context);\n        const res = executeOp(node, {input1, input2}, context) as Tensor[];\n        expect(spy).toHaveBeenCalledWith(',->', input1[0], input2[0]);\n        expect(res[0].dtype).toBe('float32');\n        expect(res[0].shape).toEqual([]);\n      });\n    });\n    describe('Transpose', () => {\n      it('should call tfOps.transpose', () => {\n        spyOn(tfOps, 'transpose');\n        node.op = 'Transpose';\n        node.inputNames = ['input1', 'input2', 'input3'];\n        node.inputParams.x = createTensorAttr(0);\n        node.attrParams.perm = createNumericArrayAttr([1, 2]);\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.transpose).toHaveBeenCalledWith(input1[0], [1, 2]);\n      });\n    });\n  });\n});\n"]}