{"version":3,"file":"transformation_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/transformation_executor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\nimport {createDtypeAttr, createNumberAttr, createNumericArrayAttrFromIndex, createStrAttr, createTensorAttr} from './test_helper';\nimport {executeOp} from './transformation_executor';\n\ndescribe('transformation', () => {\n  let node: Node;\n  const input1 = [tfOps.scalar(1)];\n  const input2 = [tfOps.tensor1d([1, 1])];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'transformation',\n      inputNames: ['input1'],\n      inputs: [],\n      inputParams: {x: createTensorAttr(0)},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('Cast', () => {\n      it('should call tfOps.cast', () => {\n        spyOn(tfOps, 'cast');\n        node.op = 'Cast';\n        node.attrParams.dtype = createDtypeAttr('float32');\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.cast).toHaveBeenCalledWith(input1[0], 'float32');\n      });\n    });\n    describe('expandDExpandDimsims', () => {\n      it('should call tfOps.expandDims', () => {\n        spyOn(tfOps, 'expandDims');\n        node.op = 'ExpandDims';\n        node.attrParams.axis = createNumberAttr(1);\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.expandDims).toHaveBeenCalledWith(input1[0], 1);\n      });\n    });\n    describe('MirrorPad', () => {\n      it('should call tfc.mirrorPad', () => {\n        spyOn(tfOps, 'mirrorPad');\n        node.op = 'MirrorPad';\n        node.inputParams.padding = createNumericArrayAttrFromIndex(1);\n        node.attrParams.mode = createStrAttr('reflect');\n        node.inputNames = ['input1', 'input3'];\n        const input3 = [tfOps.tensor2d([1, 1, 2, 2], [2, 2])];\n        executeOp(node, {input1, input3}, context);\n\n        expect(tfOps.mirrorPad)\n            .toHaveBeenCalledWith(input1[0], [[1, 1], [2, 2]], 'reflect');\n      });\n    });\n    describe('Pad', () => {\n      it('should call tfOps.pad', () => {\n        spyOn(tfOps, 'pad');\n        node.op = 'Pad';\n        node.inputParams.padding = createNumericArrayAttrFromIndex(1);\n        node.attrParams.constantValue = createNumberAttr(1);\n        node.inputNames = ['input1', 'input3'];\n        const input3 = [tfOps.tensor2d([1, 1, 2, 2], [2, 2])];\n        executeOp(node, {input1, input3}, context);\n\n        expect(tfOps.pad).toHaveBeenCalledWith(input1[0], [[1, 1], [2, 2]], 1);\n      });\n    });\n    describe('PadV2', () => {\n      it('should call tfOps.pad', () => {\n        spyOn(tfOps, 'pad');\n        node.op = 'PadV2';\n        node.inputParams.padding = createNumericArrayAttrFromIndex(1);\n        node.attrParams.constantValue = createNumberAttr(1);\n        node.inputNames = ['input1', 'input3'];\n        const input3 = [tfOps.tensor2d([1, 1, 2, 2], [2, 2])];\n        executeOp(node, {input1, input3}, context);\n\n        expect(tfOps.pad).toHaveBeenCalledWith(input1[0], [[1, 1], [2, 2]], 1);\n      });\n    });\n    describe('Reshape', () => {\n      it('should call tfOps.reshape', () => {\n        spyOn(tfOps, 'reshape');\n        node.op = 'Reshape';\n        node.inputParams.shape = createNumericArrayAttrFromIndex(1);\n        node.inputNames = ['input1', 'input2'];\n\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.reshape).toHaveBeenCalledWith(input1[0], [1, 1]);\n      });\n    });\n    describe('Squeeze', () => {\n      it('should call tfOps.squeeze', () => {\n        spyOn(tfOps, 'squeeze');\n        node.op = 'Squeeze';\n        node.attrParams.axis = createNumberAttr(1);\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.squeeze).toHaveBeenCalledWith(input1[0], 1);\n      });\n    });\n    describe('SpaceToBatchND', () => {\n      it('should call tfOps.spaceToBatchND', () => {\n        spyOn(tfOps, 'spaceToBatchND');\n        node.op = 'SpaceToBatchND';\n        node.inputParams.blockShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.paddings = createNumericArrayAttrFromIndex(2);\n        node.inputNames = ['input1', 'input2', 'input3'];\n        const input2 = [tfOps.tensor1d([1, 1, 2, 2])];\n        const input3 = [tfOps.tensor2d([1, 2, 2, 3, 2, 3, 3, 4], [4, 2])];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.spaceToBatchND)\n            .toHaveBeenCalledWith(\n                input1[0], [1, 1, 2, 2], [[1, 2], [2, 3], [2, 3], [3, 4]]);\n      });\n    });\n    describe('BatchToSpaceND', () => {\n      it('should call tfOps.batchToSpaceND', () => {\n        spyOn(tfOps, 'batchToSpaceND');\n        node.op = 'BatchToSpaceND';\n        node.inputParams.blockShape = createNumericArrayAttrFromIndex(1);\n        node.inputParams.crops = createNumericArrayAttrFromIndex(2);\n        node.inputNames = ['input1', 'input2', 'input3'];\n        const input2 = [tfOps.tensor1d([1, 1, 2, 2])];\n        const input3 = [tfOps.tensor2d([1, 2, 2, 3, 2, 3, 3, 4], [4, 2])];\n        executeOp(node, {input1, input2, input3}, context);\n\n        expect(tfOps.batchToSpaceND)\n            .toHaveBeenCalledWith(\n                input1[0], [1, 1, 2, 2], [[1, 2], [2, 3], [2, 3], [3, 4]]);\n      });\n    });\n    describe('DepthToSpace', () => {\n      it('should call tfOps.depthToSpace', () => {\n        spyOn(tfOps, 'depthToSpace');\n        node.op = 'DepthToSpace';\n        node.attrParams.blockSize = createNumberAttr(1);\n        node.attrParams.dataFormat = createStrAttr('nhwc');\n        node.inputNames = ['input1'];\n        executeOp(node, {input1}, context);\n\n        expect(tfOps.depthToSpace).toHaveBeenCalledWith(input1[0], 1, 'NHWC');\n      });\n    });\n    describe('BroadcastTo', () => {\n      it('should call tfOps.broadcastTo', () => {\n        spyOn(tfOps, 'broadcastTo');\n        node.op = 'BroadcastTo';\n        node.inputParams.shape = createNumericArrayAttrFromIndex(1);\n        node.inputNames = ['input1', 'input2'];\n\n        executeOp(node, {input1, input2}, context);\n\n        expect(tfOps.broadcastTo).toHaveBeenCalledWith(input1[0], [1, 1]);\n      });\n    });\n  });\n});\n"]}