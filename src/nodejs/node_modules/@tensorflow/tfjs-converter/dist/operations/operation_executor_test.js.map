{"version":3,"file":"operation_executor_test.js","sourceRoot":"","sources":["../../src/operations/operation_executor_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAU,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAE1E,OAAO,EAAC,gBAAgB,EAAC,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAC,eAAe,EAAC,MAAM,8BAA8B,CAAC;AAE7D,OAAO,EAAC,YAAY,EAAE,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAC9D,OAAO,KAAK,UAAU,MAAM,iCAAiC,CAAC;AAC9D,OAAO,KAAK,UAAU,MAAM,iCAAiC,CAAC;AAC9D,OAAO,KAAK,OAAO,MAAM,8BAA8B,CAAC;AACxD,OAAO,KAAK,WAAW,MAAM,kCAAkC,CAAC;AAChE,OAAO,KAAK,QAAQ,MAAM,+BAA+B,CAAC;AAC1D,OAAO,KAAK,OAAO,MAAM,8BAA8B,CAAC;AACxD,OAAO,KAAK,UAAU,MAAM,iCAAiC,CAAC;AAC9D,OAAO,KAAK,KAAK,MAAM,4BAA4B,CAAC;AACpD,OAAO,KAAK,UAAU,MAAM,iCAAiC,CAAC;AAC9D,OAAO,KAAK,KAAK,MAAM,4BAA4B,CAAC;AACpD,OAAO,KAAK,OAAO,MAAM,8BAA8B,CAAC;AACxD,OAAO,KAAK,QAAQ,MAAM,+BAA+B,CAAC;AAC1D,OAAO,KAAK,aAAa,MAAM,oCAAoC,CAAC;AACpE,OAAO,KAAK,SAAS,MAAM,gCAAgC,CAAC;AAC5D,OAAO,KAAK,UAAU,MAAM,iCAAiC,CAAC;AAC9D,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,QAAQ,MAAM,+BAA+B,CAAC;AAC1D,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,cAAc,MAAM,qCAAqC,CAAC;AACtE,OAAO,EAAC,SAAS,EAAC,MAAM,sBAAsB,CAAC;AAG/C,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,IAAU,CAAC;IACf,MAAM,OAAO,GAAG,IAAI,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAEjD,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,GAAG;YACL,IAAI,EAAE,MAAM;YACZ,EAAE,EAAE,OAAO;YACX,QAAQ,EAAE,OAAO;YACjB,UAAU,EAAE,EAAE;YACd,MAAM,EAAE,EAAE;YACV,WAAW,EAAE,EAAE;YACf,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO;YAC/D,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS;YACrE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,CAAC;aACjD,OAAO,CAAC,QAAQ,CAAC,EAAE;YAClB,EAAE,CAAC,cAAc,GAAG,QAAQ,CAAC,QAAQ,GAAG,WAAW,EAAE,GAAG,EAAE;gBACxD,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;gBAClC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;gBAC7B,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACP,CAAC,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK;YACvE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ;YACzE,MAAM,EAAE,cAAc,CAAC;aACnB,OAAO,CAAC,QAAQ,CAAC,EAAE;YAClB,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;gBAC1C,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;gBACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;gBAClC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;gBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEP,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;YAC9C,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAC/B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YACpC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;YAC9C,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;iBACvB,oBAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;iBACrC,YAAY,CAAC,oCAAoC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,UAAU,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAa,CAAC;YACxD,SAAS,CAAC,iBAAiB,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,YAAY,CAAC,OAAO,CAAC,CAAC;YACtB,YAAY,CAAC,QAAQ,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC3B,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAW,CAAC;gBACxC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAW,CAAC;gBACxC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,EAAC,CAAC,EAAE,EAAC,MAAM,EAAE,EAAE,EAAC,EAAE,CAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAC,EAAC,CAAC;YAC7C,MAAM,MAAM,GAAG,SAAS,CACL,IAAI,EAAE,EAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC,EACtD,OAAO,CAAa,CAAC;YACxC,yBAAyB;YACzB,SAAS,CAAC,iBAAiB,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,YAAY,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {add, mul, scalar, Tensor, test_util} from '@tensorflow/tfjs-core';\n\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {deregisterOp, registerOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basic_math from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hash_table from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as slice_join from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {executeOp} from './operation_executor';\nimport {Node} from './types';\n\ndescribe('OperationExecutor', () => {\n  let node: Node;\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: 'const',\n      category: 'graph',\n      inputNames: [],\n      inputs: [],\n      inputParams: {},\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    [arithmetic, basic_math, control, convolution, creation, dynamic,\n     evaluation, graph, image, logical, matrices, normalization, reduction,\n     slice_join, sparse, spectral, string, transformation]\n        .forEach(category => {\n          it('should call ' + category.CATEGORY + ' executor', () => {\n            spyOn(category, 'executeOp');\n            node.category = category.CATEGORY;\n            executeOp(node, {}, context);\n            expect(category.executeOp).toHaveBeenCalledWith(node, {}, context);\n          });\n        });\n    [arithmetic, basic_math, convolution, creation, evaluation, graph, image,\n     logical, matrices, normalization, reduction, slice_join, sparse, spectral,\n     string, transformation]\n        .forEach(category => {\n          it('should call tidy around executor', () => {\n            spyOn(tfc, 'tidy');\n            node.category = category.CATEGORY;\n            executeOp(node, {}, context);\n            expect(tfc.tidy).toHaveBeenCalled();\n          });\n        });\n\n    it('hash_table executor should have been called.', () => {\n      const resourceManager = new ResourceManager();\n      spyOn(hash_table, 'executeOp');\n      node.category = hash_table.CATEGORY;\n      executeOp(node, {}, context, resourceManager);\n      expect(hash_table.executeOp)\n          .toHaveBeenCalledWith(node, {}, context, resourceManager);\n    });\n  });\n\n  describe('custom op executeOp', () => {\n    it('should throw exception if custom op is not registered', () => {\n      node.category = 'custom';\n      expect(() => executeOp(node, {}, context))\n          .toThrowError('Custom op const is not registered.');\n    });\n  });\n\n  describe('custom op executeOp', () => {\n    it('should call the registered custom op', async () => {\n      registerOp('const', () => [scalar(1)]);\n      registerOp('const2', () => [scalar(2)]);\n      node.category = 'custom';\n      const result = executeOp(node, {}, context) as Tensor[];\n      test_util.expectArraysClose(await result[0].data(), [1]);\n      deregisterOp('const');\n      deregisterOp('const2');\n    });\n\n    it('should handle custom op with inputs and attrs', async () => {\n      registerOp('const', (node) => {\n        const a = node.inputs[0];\n        const b = node.inputs[1];\n        const attrC = node.attrs['c'] as Tensor;\n        const attrD = node.attrs['d'] as number;\n        return [add(mul(attrC.dataSync()[0], a), mul(attrD, b))];\n      });\n\n      node.category = 'custom';\n      node.inputNames = ['a', 'b'];\n      node.rawAttrs = {c: {tensor: {}}, d: {i: 3}};\n      const result = executeOp(\n                         node, {a: [scalar(1)], b: [scalar(2)], c: [scalar(2)]},\n                         context) as Tensor[];\n      // result = 2 * 1 + 3 * 2\n      test_util.expectArraysClose(await result[0].data(), [8]);\n      deregisterOp('const');\n    });\n  });\n});\n"]}