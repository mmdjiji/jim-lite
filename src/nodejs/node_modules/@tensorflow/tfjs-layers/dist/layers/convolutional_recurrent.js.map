{"version":3,"file":"convolutional_recurrent.js","sourceRoot":"","sources":["../../src/layers/convolutional_recurrent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {Activation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode} from '../common';\nimport {Constraint} from '../constraints';\nimport {InputSpec} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {Initializer} from '../initializers';\nimport {DataFormat, DataType, PaddingMode, Shape} from '../keras_format/common';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, normalizeArray} from '../utils/conv_utils';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\nimport {BaseRNNLayerArgs, generateDropoutMask, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNNCellLayerArgs} from './recurrent';\n\ndeclare interface ConvRNN2DCellArgs extends\n    Omit<SimpleRNNCellLayerArgs, 'units'> {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number];\n}\n\nabstract class ConvRNN2DCell extends RNNCell {\n  readonly filters: number;\n  readonly kernelSize: number[];\n  readonly strides: number[];\n  readonly padding: PaddingMode;\n  readonly dataFormat: DataFormat;\n  readonly dilationRate: number[];\n\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n}\n\ndeclare interface ConvRNN2DLayerArgs extends BaseRNNLayerArgs,\n                                             ConvRNN2DCellArgs {}\n\n/**\n * Base class for convolutional-recurrent layers.\n */\nclass ConvRNN2D extends RNN {\n  /** @nocollapse */\n  static className = 'ConvRNN2D';\n\n  readonly cell: ConvRNN2DCell;\n\n  constructor(args: ConvRNN2DLayerArgs) {\n    if (args.unroll) {\n      throw new NotImplementedError(\n          'Unrolling is not possible with convolutional RNNs.');\n    }\n\n    if (Array.isArray(args.cell)) {\n      throw new NotImplementedError(\n          'It is not possible at the moment to stack convolutional cells.');\n    }\n\n    super(args as RNNLayerArgs);\n\n    this.inputSpec = [new InputSpec({ndim: 5})];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      if (kwargs && kwargs['constants']) {\n        throw new ValueError('ConvRNN2D cell does not support constants');\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n\n      const training = kwargs == null ? null : kwargs['training'];\n\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  computeOutputShape(inputShape: Shape): Shape|Shape[] {\n    let outShape: Shape = this.computeSingleOutputShape(inputShape);\n\n    if (!this.returnSequences) {\n      outShape = [outShape[0], ...outShape.slice(2)];\n    }\n\n    if (this.returnState) {\n      outShape =\n          [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n    }\n\n    return outShape;\n  }\n\n  getInitialState(inputs: tfc.Tensor): tfc.Tensor[] {\n    return tfc.tidy(() => {\n      const {stateSize} = this.cell;\n\n      const inputShape = inputs.shape;\n\n      const outputShape = this.computeSingleOutputShape(inputShape);\n\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n\n      const initialState = tfc.zeros(stateShape);\n\n      if (Array.isArray(stateSize)) {\n        return Array(stateSize.length).fill(initialState);\n      }\n\n      return [initialState];\n    });\n  }\n\n  resetStates(states?: Tensor|Tensor[], training = false): void {\n    tfc.tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const inputShape = this.inputSpec[0].shape;\n\n      const outputShape = this.computeSingleOutputShape(inputShape);\n\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n\n      const batchSize = inputShape[0];\n\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n\n      // Initialize state if null.\n      if (this.getStates() == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_ = [tfc.zeros(stateShape)];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_[0] = tfc.zeros(stateShape);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n\n          const expectedShape = stateShape;\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  protected computeSingleOutputShape(inputShape: Shape): Shape {\n    const {dataFormat, filters, kernelSize, padding, strides, dilationRate} =\n        this.cell;\n\n    const isChannelsFirst = dataFormat === 'channelsFirst';\n\n    const h = inputShape[isChannelsFirst ? 3 : 2];\n    const w = inputShape[isChannelsFirst ? 4 : 3];\n\n    const hOut = convOutputLength(\n        h, kernelSize[0], padding, strides[0], dilationRate[0]);\n    const wOut = convOutputLength(\n        w, kernelSize[1], padding, strides[1], dilationRate[1]);\n\n    const outShape: Shape = [\n      ...inputShape.slice(0, 2),\n      ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])\n    ];\n\n    return outShape;\n  }\n}\n\nexport declare interface ConvLSTM2DCellArgs extends\n    Omit<LSTMCellLayerArgs, 'units'>, ConvRNN2DCellArgs {}\n\nexport class ConvLSTM2DCell extends LSTMCell implements ConvRNN2DCell {\n  /** @nocollapse */\n  static className = 'ConvLSTM2DCell';\n\n  readonly filters: number;\n  readonly kernelSize: number[];\n  readonly strides: number[];\n  readonly padding: PaddingMode;\n  readonly dataFormat: DataFormat;\n  readonly dilationRate: number[];\n\n  constructor(args: ConvLSTM2DCellArgs) {\n    const {\n      filters,\n      kernelSize,\n      strides,\n      padding,\n      dataFormat,\n      dilationRate,\n    } = args;\n\n    super({...args, units: filters});\n\n    this.filters = filters;\n    assertPositiveInteger(this.filters, 'filters');\n\n    this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n    this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n\n    this.strides = normalizeArray(strides || 1, 2, 'strides');\n    this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n\n    this.padding = padding || 'valid';\n    checkPaddingMode(this.padding);\n\n    this.dataFormat = dataFormat || 'channelsLast';\n    checkDataFormat(this.dataFormat);\n\n    this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n    this.dilationRate.forEach(\n        rate => assertPositiveInteger(rate, 'dilationRate'));\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n\n    const numOfKernels = 4;\n\n    const kernelShape =\n        this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n\n    const recurrentKernelShape =\n        this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', recurrentKernelShape, null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n\n    if (this.useBias) {\n      let biasInitializer: Initializer;\n\n      if (this.unitForgetBias) {\n        const init = this.biasInitializer;\n\n        const filters = this.filters;\n\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): tfc.Tensor {\n            const biasI = init.apply([filters]);\n            const biasF = tfc.ones([filters]);\n            const biasCAndO = init.apply([filters * 2]);\n            return K.concatenate([biasI, biasF, biasCAndO]);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight(\n          'bias', [this.filters * numOfKernels], null, biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.built = true;\n  }\n\n  call(inputs: tfc.Tensor[], kwargs: Kwargs): tfc.Tensor[] {\n    return tfc.tidy(() => {\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] || false;\n\n      const x = inputs[0];         // Current input\n      const hTMinus1 = inputs[1];  // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n\n      const numOfKernels = 4;\n\n      type DropoutMasks = [tfc.Tensor, tfc.Tensor, tfc.Tensor, tfc.Tensor];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(x),\n                             rate: this.dropout,\n                             training,\n                             count: numOfKernels\n                           }) as tfc.Tensor[];\n      }\n\n      const dropoutMask = this.dropoutMask as DropoutMasks;\n\n      const applyDropout =\n          (x: tfc.Tensor, mask: tfc.Tensor[], index: number) => {\n            if (!mask || !mask[index]) {\n              return x;\n            }\n\n            return tfc.mul(mask[index], x);\n          };\n\n      let xI = applyDropout(x, dropoutMask, 0);\n      let xF = applyDropout(x, dropoutMask, 1);\n      let xC = applyDropout(x, dropoutMask, 2);\n      let xO = applyDropout(x, dropoutMask, 3);\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: numOfKernels\n                                    }) as tfc.Tensor[];\n      }\n\n      const recDropoutMask = this.recurrentDropoutMask as DropoutMasks;\n\n      let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n      let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n      let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n      let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n\n      const kernelChannelAxis = 3;\n\n      const [kernelI, kernelF, kernelC, kernelO]: tfc.Tensor[] =\n          tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n\n      const [biasI, biasF, biasC, biasO]: tfc.Tensor[] = this.useBias ?\n          tfc.split(this.bias.read(), numOfKernels) :\n          [null, null, null, null];\n\n      xI = this.inputConv(xI, kernelI, biasI, this.padding);\n      xF = this.inputConv(xF, kernelF, biasF, this.padding);\n      xC = this.inputConv(xC, kernelC, biasC, this.padding);\n      xO = this.inputConv(xO, kernelO, biasO, this.padding);\n\n      const [recKernelI, recKernelF, recKernelC, recKernelO]: tfc.Tensor[] =\n          tfc.split(\n              this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n\n      hI = this.recurrentConv(hI, recKernelI);\n      hF = this.recurrentConv(hF, recKernelF);\n      hC = this.recurrentConv(hC, recKernelC);\n      hO = this.recurrentConv(hO, recKernelO);\n\n      const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n      const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n      const c = tfc.add(\n          tfc.mul(f, cTMinus1),\n          tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n      const h = tfc.mul(\n          this.recurrentActivation.apply(tfc.add(xO, hO)),\n          this.activation.apply(c));\n\n      return [h, h, c];\n    });\n  }\n\n  getConfig(): tfc.serialization.ConfigDict {\n    const {'units': _, ...baseConfig} = super.getConfig();\n\n    const config: tfc.serialization.ConfigDict = {\n      filters: this.filters,\n      kernelSize: this.kernelSize,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      strides: this.strides,\n    };\n\n    return {...baseConfig, ...config};\n  }\n\n  inputConv(x: Tensor, w: Tensor, b?: Tensor, padding?: PaddingMode) {\n    const out = tfc.conv2d(\n        x as tfc.Tensor3D, w as tfc.Tensor4D, this.strides as [number, number],\n        (padding || 'valid') as 'same' | 'valid',\n        this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC',\n        this.dilationRate as [number, number]);\n\n    if (b) {\n      return K.biasAdd(out, b, this.dataFormat) as tfc.Tensor3D;\n    }\n\n    return out;\n  }\n\n  recurrentConv(x: Tensor, w: Tensor) {\n    const strides = 1;\n\n    return tfc.conv2d(\n        x as tfc.Tensor3D, w as tfc.Tensor4D, strides, 'same',\n        this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n  }\n}\n\ntfc.serialization.registerClass(ConvLSTM2DCell);\n\nexport declare interface ConvLSTM2DArgs extends\n    Omit<LSTMLayerArgs, 'units'|'cell'>, ConvRNN2DLayerArgs {}\n\nexport class ConvLSTM2D extends ConvRNN2D {\n  /** @nocollapse */\n  static className = 'ConvLSTM2D';\n\n  constructor(args: ConvLSTM2DArgs) {\n    const cell = new ConvLSTM2DCell(args);\n\n    super({...args, cell} as ConvRNN2DLayerArgs);\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends tfc.serialization.Serializable>(\n      cls: tfc.serialization.SerializableConstructor<T>,\n      config: tfc.serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\n\ntfc.serialization.registerClass(ConvLSTM2D);\n"]}