{"version":3,"file":"convolutional_recurrent_test.js","sourceRoot":"","sources":["../../src/layers/convolutional_recurrent_test.ts"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serializeActivation, Tanh} from '../activations';\nimport {NonNeg, serializeConstraint, UnitNorm} from '../constraints';\n\nimport {sequential} from '../exports';\nimport * as tfl from '../index';\nimport {GlorotUniform, HeUniform, Ones, serializeInitializer} from '../initializers';\nimport {DataFormat, PaddingMode} from '../keras_format/common';\nimport {modelFromJSON} from '../models';\nimport {L1L2, serializeRegularizer} from '../regularizers';\nimport {getCartesianProductOfValues} from '../utils/generic_utils';\nimport {convertPythonicToTs, convertTsToPythonic} from '../utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {ConvLSTM2DArgs, ConvLSTM2DCellArgs} from './convolutional_recurrent';\n\ndescribeMathCPUAndGPU('ConvLSTM2DCell', () => {\n  /**\n   * The tensor values (output, h, c) can be obtained by the following Python\n   * code\n   *\n   * sequence_len = 1\n   * data_size = 8\n   * data_channel = 3\n   *\n   * data_format = \"channels_first\"\n   * filters = 9\n   * kernel_size = 5\n   * padding = \"same\"\n   *\n   * inputs = np.ones([1, sequence_len, data_channel, data_size, data_size])\n   *\n   * x = keras.Input(batch_shape=inputs.shape)\n   *\n   * kwargs = {'data_format': data_format,\n   *           'return_state': True,\n   *           'filters': filters,\n   *           'kernel_size': kernel_size,\n   *           'padding': padding}\n   *\n   * layer = keras.layers.ConvLSTM2D(kernel_initializer='ones',\n   * bias_initializer=\"ones\", recurrent_initializer='ones', **kwargs)\n   * layer.build(inputs.shape)\n   *\n   * outputs = layer(x)\n   *\n   * model = keras.models.Model(x, outputs)\n   *\n   * y = model.predict(inputs)\n   *\n   * y[0].mean(), y[1].mean(), y[2].mean()\n   */\n  describe('should return the correct outputs', () => {\n    const sequenceLength = 1;\n    const inputSize = 8;\n    const channels = 3;\n\n    const dataFormatValues: DataFormat[] = ['channelsFirst', 'channelsLast'];\n    const filterValues = [3, 5, 9];\n    const kernelSizeValues = [3, 5];\n    const paddingValues: PaddingMode[] = ['valid', 'same'];\n\n    const testArgs = getCartesianProductOfValues(\n                         dataFormatValues,\n                         filterValues,\n                         kernelSizeValues,\n                         paddingValues,\n                         ) as Array<[DataFormat, number, number, PaddingMode]>;\n\n    for (const [dataFormat, filters, kernelSize, padding] of testArgs) {\n      const testTitle = `for dataFormat=${dataFormat}, filters=${\n          filters}, kernelSize=${kernelSize}, padding=${padding}`;\n\n      it(testTitle, () => {\n        const inputShape = dataFormat === 'channelsFirst' ?\n            [sequenceLength, channels, inputSize, inputSize] :\n            [sequenceLength, inputSize, inputSize, channels];\n\n        const x = tfc.ones(inputShape);\n\n        const cell = tfl.layers.convLstm2dCell({\n          dataFormat,\n          filters,\n          kernelSize,\n          padding,\n          kernelInitializer: 'ones',\n          recurrentInitializer: 'ones',\n          biasInitializer: 'ones',\n        });\n\n        cell.build(x.shape);\n\n        const outputSize =\n            padding === 'same' ? inputSize : (inputSize - kernelSize + 1);\n\n        const outShape = dataFormat === 'channelsFirst' ?\n            [sequenceLength, filters, outputSize, outputSize] :\n            [sequenceLength, outputSize, outputSize, filters];\n\n        const initialH = tfc.zeros(outShape);\n\n        const initialC = tfc.zeros(outShape);\n\n        const [o, h, c] = cell.call([x, initialH, initialC], {});\n\n        expect(o.shape).toEqual(outShape);\n        expect(h.shape).toEqual(outShape);\n        expect(c.shape).toEqual(outShape);\n\n        expectTensorsClose(o.mean().flatten(), tfc.tensor1d([0.7615942]));\n        expectTensorsClose(h.mean().flatten(), tfc.tensor1d([0.7615942]));\n        expectTensorsClose(c.mean().flatten(), tfc.tensor1d([1]));\n      });\n    }\n  });\n});\n\ndescribeMathCPU('ConvLSTM2D Symbolic', () => {\n  const dtype = 'float32';\n\n  const batchSize = 8;\n  const sequenceLength = 10;\n  const inputSize = 8;\n  const channels = 3;\n\n  const inputShape = [\n    batchSize,\n    sequenceLength,\n    inputSize,\n    inputSize,\n    channels,\n  ];\n\n  const filters = 5;\n  const kernelSize = [3, 3];\n\n  const outputSize = inputSize - kernelSize[0] + 1;\n\n  describe('should return the correct output shape', () => {\n    it('for returnSequences=false, returnState=false', () => {\n      const input =\n          new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n      const convLstm = tfl.layers.convLstm2d({filters, kernelSize});\n      const output = convLstm.apply(input) as tfl.SymbolicTensor;\n      expect(output.shape).toEqual([8, 6, 6, 5]);\n    });\n\n    it('for returnSequences=false, returnState=true', () => {\n      const returnState = true;\n\n      const input = new tfl.SymbolicTensor(dtype, inputShape, null, [], null);\n\n      const convLstm =\n          tfl.layers.convLstm2d({filters, kernelSize, returnState});\n\n      const output = convLstm.apply(input) as tfl.SymbolicTensor[];\n\n      const outputShape = [batchSize, outputSize, outputSize, filters];\n\n      expect(output.length).toEqual(3);\n      expect(output[0].shape).toEqual(outputShape);\n      expect(output[1].shape).toEqual(outputShape);\n      expect(output[2].shape).toEqual(outputShape);\n    });\n\n    it('for returnSequences=true, returnState=false', () => {\n      const returnSequences = true;\n\n      const input = new tfl.SymbolicTensor(dtype, inputShape, null, [], null);\n\n      const convLstm =\n          tfl.layers.convLstm2d({filters, kernelSize, returnSequences});\n\n      const output = convLstm.apply(input) as tfl.SymbolicTensor;\n\n      const outputShape =\n          [batchSize, sequenceLength, outputSize, outputSize, filters];\n\n      expect(output.shape).toEqual(outputShape);\n    });\n\n    it('for returnSequences=true, returnState=true', () => {\n      const returnSequences = true;\n      const returnState = true;\n\n      const input = new tfl.SymbolicTensor(dtype, inputShape, null, [], null);\n\n      const convLstm = tfl.layers.convLstm2d(\n          {filters, kernelSize, returnSequences, returnState});\n\n      const output = convLstm.apply(input) as tfl.SymbolicTensor[];\n\n      const outputShape =\n          [batchSize, sequenceLength, outputSize, outputSize, filters];\n\n      const stateShape = [batchSize, outputSize, outputSize, filters];\n\n      expect(output.length).toEqual(3);\n      expect(output[0].shape).toEqual(outputShape);\n      expect(output[1].shape).toEqual(stateShape);\n      expect(output[2].shape).toEqual(stateShape);\n    });\n  });\n\n  it('should contain the correct number of weights', () => {\n    const input = new tfl.SymbolicTensor(dtype, inputShape, null, [], null);\n\n    const convLstm = tfl.layers.convLstm2d(\n        {filters, kernelSize, returnSequences: true, returnState: true});\n\n    convLstm.apply(input);\n\n    expect(convLstm.trainable).toEqual(true);\n    expect(convLstm.trainableWeights.length).toEqual(3);\n    expect(convLstm.nonTrainableWeights.length).toEqual(0);\n    expect(convLstm.weights.length).toEqual(3);\n  });\n\n  describe('should build the correct layer from exported config', () => {\n    for (const implementation of [1, 2]) {\n      it(`for implementation=${implementation}`, () => {\n        const layer = tfl.layers.convLstm2d({\n          filters,\n          kernelSize,\n          inputShape: inputShape.slice(1),\n          implementation,\n          padding: 'same',\n          returnSequences: true,\n        });\n\n        const pythonicConfig = convertTsToPythonic(layer.getConfig());\n\n        const tsConfig = convertPythonicToTs(pythonicConfig);\n\n        const layerPrime =\n            tfl.layers.convLstm2d(tsConfig as unknown as ConvLSTM2DArgs);\n\n        expect(layerPrime.getConfig().filters).toEqual(filters);\n        expect(layerPrime.getConfig().kernelSize).toEqual(kernelSize);\n        expect(layerPrime.getConfig().implementation).toEqual(implementation);\n      });\n    }\n  });\n\n  describe('should return equal outputs with loaded model', () => {\n    it('for simple model', async () => {\n      const model = tfl.sequential();\n\n      const layer = tfl.layers.convLstm2d({\n        filters,\n        kernelSize,\n        padding: 'same',\n        inputShape: inputShape.slice(1),\n        returnSequences: true,\n      });\n\n      model.add(layer);\n\n      const x = tfc.randomNormal(inputShape);\n\n      const y = model.predict(x) as tfc.Tensor;\n\n      let savedArtifacts: tfc.io.ModelArtifacts;\n\n      await model.save(tfc.io.withSaveHandler(async (artifacts) => {\n        savedArtifacts = artifacts;\n        return null;\n      }));\n\n      const loadedModel =\n          await tfl.loadLayersModel(tfc.io.fromMemory(savedArtifacts));\n\n      const yPrime = loadedModel.predict(x) as tfc.Tensor;\n\n      expect(model.inputs[0].shape).toEqual(loadedModel.inputs[0].shape);\n      expect(model.outputs[0].shape).toEqual(loadedModel.outputs[0].shape);\n      expectTensorsClose(yPrime, y);\n    });\n\n    it('for more complex model', async () => {\n      const model = tfl.sequential();\n      model.add(tfl.layers.convLstm2d({\n        filters,\n        kernelSize,\n        inputShape: inputShape.slice(1),\n      }));\n      model.add(tfl.layers.dropout({rate: 0.2}));\n      model.add(tfl.layers.flatten());\n      model.add(tfl.layers.dense({units: 256, activation: 'relu'}));\n      model.add(tfl.layers.dropout({rate: 0.3}));\n      model.add(tfl.layers.dense({units: 6, activation: 'softmax'}));\n\n      const x = tfc.randomNormal(inputShape);\n\n      const y = model.predict(x) as tfc.Tensor;\n\n      let savedArtifacts: tfc.io.ModelArtifacts;\n\n      await model.save(tfc.io.withSaveHandler(async (artifacts) => {\n        savedArtifacts = artifacts;\n        return null;\n      }));\n\n      const loadedModel =\n          await tfl.loadLayersModel(tfc.io.fromMemory(savedArtifacts));\n\n      const yPrime = loadedModel.predict(x) as tfc.Tensor;\n\n      expect(model.inputs[0].shape).toEqual(loadedModel.inputs[0].shape);\n      expect(model.outputs[0].shape).toEqual(loadedModel.outputs[0].shape);\n      expectTensorsClose(yPrime, y);\n    });\n  });\n});\n\ndescribeMathCPUAndGPU('ConvLSTM2D Tensor', () => {\n  const filters = 5;\n  const kernelSize = 3;\n\n  const batchSize = 4;\n  const sequenceLength = 2;\n  const inputSize = 5;\n  const channels = 3;\n\n  const inputShape =\n      [batchSize, sequenceLength, inputSize, inputSize, channels];\n\n  const outputSize = inputSize - kernelSize + 1;\n\n  describe('should run as expected', () => {\n    const dropoutValues = [0.0, 0.1];\n    const recurrentDropoutValues = [0.0, 0.1];\n    const trainingValues = [true, false];\n    const implementationValues = [1, 2];\n\n    const args = getCartesianProductOfValues(\n                     dropoutValues,\n                     recurrentDropoutValues,\n                     trainingValues,\n                     implementationValues,\n                     ) as Array<[number, number, boolean, number]>;\n\n    for (const [dropout, recurrentDropout, training, implementation] of args) {\n      const testTitle = `for dropout=${dropout}, recurrentDropout=${\n          recurrentDropout},implementation=${implementation}, training=${\n          training}, implementation=${implementation}`;\n\n      it(testTitle, () => {\n        const convLstm = tfl.layers.convLstm2d({\n          filters,\n          kernelSize,\n          kernelInitializer: 'ones',\n          recurrentInitializer: 'ones',\n          biasInitializer: 'ones',\n          dropout,\n          recurrentDropout,\n          implementation,\n        });\n\n        const input = tfc.ones(inputShape);\n\n        spyOn(tfc, 'dropout').and.callThrough();\n        let dropoutCall = 0;\n        if (dropout !== 0.0 && training) {\n          dropoutCall += 4;\n        }\n        if (recurrentDropout !== 0.0 && training) {\n          dropoutCall += 4;\n        }\n\n        let numTensors = 0;\n\n        for (let i = 0; i < 2; i++) {\n          tfc.dispose(convLstm.apply(input, {training}) as tfc.Tensor);\n\n          expect(tfc.dropout).toHaveBeenCalledTimes((i + 1) * dropoutCall);\n\n          if (i === 0) {\n            numTensors = tfc.memory().numTensors;\n          } else {\n            expect(tfc.memory().numTensors).toEqual(numTensors);\n          }\n        }\n      });\n    }\n\n    it('for stateful forward');\n  });\n\n  describe('should return the correct outputs', () => {\n    const returnStateValues = [true, false];\n    const returnSequencesValues = [true, false];\n    const implementationValues = [1, 2];\n\n    const args = getCartesianProductOfValues(\n                     returnStateValues,\n                     returnSequencesValues,\n                     implementationValues,\n                     ) as Array<[boolean, boolean, number]>;\n\n    for (const [returnState, returnSequences, implementation] of args) {\n      const testTitle = `for returnState=${returnState}, returnSequences=${\n          returnSequences}, implementation=${implementation}`;\n\n      it(testTitle, () => {\n        const convLstm = tfl.layers.convLstm2d({\n          filters,\n          kernelSize,\n          returnState,\n          returnSequences,\n          implementation,\n          kernelInitializer: 'ones',\n          recurrentInitializer: 'ones',\n          biasInitializer: 'ones',\n        });\n\n        const input = tfc.ones(inputShape);\n\n        let output = convLstm.apply(input);\n\n        const expectedOutputValueAtT0 = 0.76159424;\n        const expectedOutputValueAtT1 = 0.96402746;\n        const expectedH = expectedOutputValueAtT1;\n        const expectedC = 2.0;\n\n        let expectedOutput: tfc.Tensor;\n        if (returnSequences) {\n          const outputAtT0 = tfc.mul(\n              tfc.scalar(expectedOutputValueAtT0),\n              tfc.ones([batchSize, 1, outputSize, outputSize, filters]));\n\n          const outputAtT1 = tfc.mul(\n              tfc.scalar(expectedOutputValueAtT1),\n              tfc.ones([batchSize, 1, outputSize, outputSize, filters]));\n\n          expectedOutput = tfc.concat([outputAtT0, outputAtT1], 1);\n        } else {\n          expectedOutput = tfc.mul(\n              tfc.scalar(expectedOutputValueAtT1),\n              tfc.ones([batchSize, outputSize, outputSize, filters]));\n        }\n\n        if (returnState) {\n          output = output as tfc.Tensor[];\n\n          expect(output.length).toEqual(3);\n\n          expectTensorsClose(output[0], expectedOutput);\n\n          expectTensorsClose(\n              output[1],\n              tfc.mul(\n                  tfc.scalar(expectedH),\n                  tfc.ones([batchSize, outputSize, outputSize, filters])));\n          expectTensorsClose(\n              output[2],\n              tfc.mul(\n                  tfc.scalar(expectedC),\n                  tfc.ones([batchSize, outputSize, outputSize, filters])));\n        } else {\n          output = output as tfc.Tensor;\n\n          expectTensorsClose(output, expectedOutput);\n        }\n      });\n    }\n\n    it('for nested model', () => {\n      const model = tfl.sequential();\n\n      const nestedModel = tfl.sequential();\n\n      nestedModel.add(tfl.layers.convLstm2d({\n        filters,\n        kernelSize,\n        kernelInitializer: 'ones',\n        recurrentInitializer: 'ones',\n        biasInitializer: 'ones',\n        batchInputShape: inputShape\n      }));\n\n      model.add(nestedModel);\n\n      const input = tfc.ones(inputShape);\n\n      const output = model.apply(input) as tfc.Tensor;\n\n      const expectedOutput = tfc.mul(\n          tfc.scalar(0.96402746),\n          tfc.ones([batchSize, outputSize, outputSize, filters]));\n\n      expectTensorsClose(output, expectedOutput);\n    });\n  });\n});\n\n// TODO: Add GPU test once Gather supports 5 rank tensor.\ndescribeMathCPU('should run BPTT correctly', () => {\n  const filters = 3;\n  const kernelSize = 3;\n  const padding = 'same';\n\n  const batchSize = 4;\n  const sequenceLength = 2;\n  const inputSize = 5;\n  const channels = 1;\n\n  const inputShape =\n      [batchSize, sequenceLength, inputSize, inputSize, channels];\n\n  /**\n   * batch_size = 4\n   * sequence_len = 2\n   * data_size = 5\n   * data_channel = 1\n   *\n   * filters = 3\n   * kernel_size = 3\n   * padding = \"same\"\n   *\n   * kwargs = {'filters': filters, 'kernel_size': kernel_size, 'padding':\n   * padding, 'batch_input_shape': [batch_size, sequence_len, data_size,\n   * data_size, data_channel], 'stateful': True}\n   *\n   * model = keras.Sequential()\n   *\n   * model.add(keras.layers.ConvLSTM2D(kernel_initializer='ones',\n   * bias_initializer=\"ones\", recurrent_initializer='ones', **kwargs))\n   *\n   * model.add(keras.layers.Flatten())\n   *\n   * model.add(keras.layers.Dense(units=1, kernel_initializer='zeros',\n   * use_bias=False))\n   *\n   * model.compile(loss='mean_squared_error', optimizer='sgd')\n   *\n   * xs_1 = np.ones([batch_size, sequence_len, data_size, data_size,\n   * data_channel])\n   * xs_2 = np.zeros([batch_size, sequence_len, data_size, data_size,\n   * data_channel])\n   * xs = np.concatenate([xs_1, xs_2], 0)\n   *\n   * ys = np.array([[1], [1], [1], [1], [0], [0], [0], [0]])\n   *\n   * history = model.fit(xs, ys, batch_size=batch_size, shuffle=False, epochs=3)\n   * print(history.history)\n   */\n  it('for stateful BPTT', async () => {\n    const model = tfl.sequential();\n\n    model.add(tfl.layers.convLstm2d({\n      filters,\n      kernelSize,\n      padding,\n      kernelInitializer: 'ones',\n      recurrentInitializer: 'ones',\n      biasInitializer: 'ones',\n      stateful: true,\n      batchInputShape: inputShape\n    }));\n\n    model.add(tfl.layers.flatten());\n\n    model.add(tfl.layers.dense(\n        {units: 1, kernelInitializer: 'zeros', useBias: false}));\n\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n    const input = tfc.concat([tfc.ones(inputShape), tfc.zeros(inputShape)], 0);\n\n    const output = tfc.tensor([1, 1, 1, 1, 0, 0, 0, 0]);\n\n    const history =\n        await model.fit(input, output, {batchSize, shuffle: false, epochs: 3});\n\n    expect(history.history.loss.length).toBe(3);\n    expect(history.history.loss[0]).toBeCloseTo(1.5441135168075562);\n    expect(history.history.loss[1]).toBeCloseTo(3.209195613861084);\n    expect(history.history.loss[2]).toBeCloseTo(3.7930736541748047);\n  });\n\n  /**\n   * batch_size = 4\n   * sequence_len = 2\n   * data_size = 5\n   * data_channel = 1\n   *\n   * filters = 3\n   * kernel_size = 3\n   * padding = \"same\"\n   *\n   * kwargs = {'filters': filters, 'kernel_size': kernel_size, 'padding':\n   * padding, 'batch_input_shape': [batch_size, sequence_len, data_size,\n   * data_size, data_channel]}\n   *\n   * model = keras.Sequential()\n   *\n   * model.add(keras.layers.ConvLSTM2D(kernel_initializer='ones',\n   * bias_initializer=\"ones\", recurrent_initializer='ones', **kwargs))\n   *\n   * model.add(keras.layers.Flatten())\n   *\n   * model.add(keras.layers.Dense(units=1, kernel_initializer='zeros',\n   * use_bias=False))\n   *\n   * model.compile(loss='mean_squared_error', optimizer='sgd')\n   *\n   * xs_1 = np.ones([batch_size, sequence_len, data_size, data_size,\n   * data_channel])\n   * xs_2 = np.zeros([batch_size, sequence_len, data_size,\n   * data_size, data_channel])\n   * xs = np.concatenate([xs_1, xs_2], 0)\n   *\n   * ys = np.array([[1], [1], [1], [1], [0], [0], [0], [0]])\n   *\n   * history = model.fit(xs, ys, batch_size=batch_size, shuffle=False, epochs=3)\n   * print(history.history)\n   */\n  it('for normal BPTT', async () => {\n    const model = tfl.sequential();\n\n    model.add(tfl.layers.convLstm2d({\n      filters,\n      kernelSize,\n      padding,\n      kernelInitializer: 'ones',\n      recurrentInitializer: 'ones',\n      biasInitializer: 'ones',\n      batchInputShape: inputShape\n    }));\n\n    model.add(tfl.layers.flatten());\n\n    model.add(tfl.layers.dense(\n        {units: 1, kernelInitializer: 'zeros', useBias: false}));\n\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n    const input = tfc.concat([tfc.ones(inputShape), tfc.zeros(inputShape)], 0);\n\n    const output = tfc.tensor([1, 1, 1, 1, 0, 0, 0, 0]);\n\n    const history =\n        await model.fit(input, output, {batchSize, shuffle: false, epochs: 3});\n\n    expect(history.history.loss.length).toBe(3);\n    expect(history.history.loss[0]).toBeCloseTo(1.367607831954956);\n    expect(history.history.loss[1]).toBeCloseTo(1.9423290491104126);\n    expect(history.history.loss[2]).toBeCloseTo(2.00433349609375);\n  });\n\n  /**\n   * batch_size = 4\n   * sequence_len = 2\n   * data_size = 5\n   * data_channel = 1\n   *\n   * filters = 3\n   * kernel_size = 3\n   * padding = \"same\"\n   *\n   * kwargs = {'filters': filters, 'kernel_size': kernel_size, 'padding':\n   * padding, 'batch_input_shape': [batch_size, sequence_len, data_size,\n   * data_size, data_channel]}\n   *\n   * model = keras.Sequential()\n   *\n   * model.add(keras.layers.ConvLSTM2D(kernel_initializer='ones',\n   * bias_initializer=\"ones\", recurrent_initializer='ones', **kwargs))\n   *\n   * model.add(keras.layers.Flatten())\n   *\n   * model.add(keras.layers.Dense(units=1, kernel_initializer='zeros',\n   * use_bias=False))\n   *\n   * model.compile(loss='mean_squared_error', optimizer='sgd')\n   *\n   * xs_1 = np.ones([batch_size, sequence_len, data_size, data_size,\n   * data_channel])\n   * xs_2 = np.zeros([batch_size, sequence_len, data_size,\n   * data_size, data_channel])\n   * xs = np.concatenate([xs_1, xs_2], 0)\n   *\n   * ys = np.array([[1], [1], [1], [1], [0], [0], [0], [0]])\n   *\n   * model.fit(xs, ys, batch_size=batch_size, shuffle=False, epochs=2)\n   *\n   * history = model.fit(xs, ys, batch_size=batch_size, shuffle=False, epochs=3)\n   * print(history.history)\n   */\n  it('with no leak', async () => {\n    const model = tfl.sequential();\n\n    model.add(tfl.layers.convLstm2d({\n      filters,\n      kernelSize,\n      padding,\n      kernelInitializer: 'ones',\n      recurrentInitializer: 'ones',\n      biasInitializer: 'ones',\n      batchInputShape: inputShape\n    }));\n\n    model.add(tfl.layers.flatten());\n\n    model.add(tfl.layers.dense(\n        {units: 1, kernelInitializer: 'zeros', useBias: false}));\n\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n    const input = tfc.concat([tfc.ones(inputShape), tfc.zeros(inputShape)], 0);\n\n    const output = tfc.tensor([1, 1, 1, 1, 0, 0, 0, 0]);\n\n    // Serves as burn-in call for subsequent tracking of memory leak.\n    await model.fit(input, output, {epochs: 2, batchSize, shuffle: false});\n\n    const numTensors0 = tfc.memory().numTensors;\n    const history =\n        await model.fit(input, output, {epochs: 3, batchSize, shuffle: false});\n    const numTensors1 = tfc.memory().numTensors;\n\n    // Assert no memory leak.\n    expect(numTensors1).toEqual(numTensors0);\n    expect(history.history.loss.length).toEqual(3);\n    expect(history.history.loss[0]).toBeCloseTo(2.00433349609375);\n    expect(history.history.loss[1]).toBeCloseTo(2.0098776817321777);\n    expect(history.history.loss[2]).toBeCloseTo(2.0099055767059326);\n  });\n});\n\ndescribeMathCPU('ConvLSTM2D Serialization and Deserialization', () => {\n  const cellConfig: ConvLSTM2DCellArgs = {\n    filters: 32,\n    kernelSize: 3,\n    dataFormat: 'channelsLast',\n    dilationRate: 2,\n    padding: 'same',\n    strides: 2,\n    activation: 'tanh',\n    recurrentActivation: 'tanh',\n    useBias: true,\n    kernelInitializer: 'glorotUniform',\n    recurrentInitializer: 'heUniform',\n    biasInitializer: 'ones',\n    kernelRegularizer: 'l1l2',\n    recurrentRegularizer: 'l1l2',\n    biasRegularizer: 'l1l2',\n    kernelConstraint: 'unitNorm',\n    recurrentConstraint: 'unitNorm',\n    biasConstraint: 'nonNeg',\n    dropout: 0.1,\n    recurrentDropout: 0.2,\n    name: 'cell_1',\n    batchSize: 12,\n    batchInputShape: [12, 8, 8],\n    inputShape: [8, 8],\n    dtype: 'int32',\n    inputDType: 'int32',\n    trainable: true,\n    implementation: 1,\n    unitForgetBias: true,\n  };\n\n  const expectedCellConfigPrime = {\n    name: 'cell_1',\n    trainable: true,\n    batchInputShape: [12, 8, 8],\n    dtype: 'int32',\n    filters: 32,\n    kernelSize: [3, 3],\n    dataFormat: 'channelsLast',\n    dilationRate: [2, 2],\n    padding: 'same',\n    strides: [2, 2],\n    activation: serializeActivation(new Tanh()),\n    recurrentActivation: serializeActivation(new Tanh()),\n    useBias: true,\n    kernelInitializer: serializeInitializer(new GlorotUniform()),\n    recurrentInitializer: serializeInitializer(new HeUniform()),\n    biasInitializer: serializeInitializer(new Ones()),\n    kernelRegularizer: serializeRegularizer(new L1L2()),\n    recurrentRegularizer: serializeRegularizer(new L1L2()),\n    biasRegularizer: serializeRegularizer(new L1L2()),\n    activityRegularizer: serializeRegularizer(null),\n    kernelConstraint: serializeConstraint(new UnitNorm({})),\n    recurrentConstraint: serializeConstraint(new UnitNorm({})),\n    biasConstraint: serializeConstraint(new NonNeg()),\n    implementation: 1,\n    unitForgetBias: true,\n  };\n\n  describe('ConvLSTM2DCell.getConfig', () => {\n    it('should return the expected values', () => {\n      const cell = tfl.layers.convLstm2dCell(cellConfig);\n\n      const {dropout, recurrentDropout, ...configPrime} = cell.getConfig();\n\n      expect(configPrime).toEqual(expectedCellConfigPrime);\n      expect(dropout).toBeCloseTo(0.1);\n      expect(recurrentDropout).toBeCloseTo(0.2);\n    });\n  });\n\n  describe('ConvLSTM2D.getConfig', () => {\n    it('should return the expected values', () => {\n      const config: ConvLSTM2DArgs = {\n        ...cellConfig,\n        name: 'layer_1',\n        ...{\n          returnSequences: true,\n          returnState: true,\n          stateful: true,\n          unroll: false,\n          goBackwards: true,\n          inputDim: 8,\n          inputLength: 8,\n        } as Omit<ConvLSTM2DArgs, keyof ConvLSTM2DCellArgs>\n      };\n\n      const cell = tfl.layers.convLstm2d(config);\n\n      const {dropout, recurrentDropout, ...configPrime} = cell.getConfig();\n\n      expect(configPrime).toEqual({\n        ...expectedCellConfigPrime,\n        name: 'layer_1',\n        returnSequences: true,\n        returnState: true,\n        stateful: true,\n        unroll: false,\n        goBackwards: true,\n      });\n      expect(dropout).toBeCloseTo(0.1);\n      expect(recurrentDropout).toBeCloseTo(0.2);\n    });\n  });\n\n  it('should return equal outputs before and after', async () => {\n    const model = sequential();\n\n    const batchSize = 8;\n    const sequenceLength = 1;\n    const inputSize = 8;\n    const channels = 3;\n\n    const filters = 5;\n    const kernelSize = 3;\n\n    const layer = tfl.layers.convLstm2d({\n      filters,\n      kernelSize,\n      kernelInitializer: 'ones',\n      recurrentInitializer: 'ones',\n      returnSequences: true,\n      dataFormat: 'channelsFirst',\n      inputShape: [sequenceLength, channels, inputSize, inputSize]\n    });\n\n    model.add(layer);\n\n    const x =\n        tfc.ones([batchSize, sequenceLength, channels, inputSize, inputSize]);\n\n    const y = model.predict(x) as tfc.Tensor;\n\n    const json = model.toJSON(null, false);\n\n    const modelPrime = await modelFromJSON({modelTopology: json});\n\n    const yPrime = modelPrime.predict(x) as tfc.Tensor;\n\n    expectTensorsClose(yPrime, y);\n  });\n});\n"]}